{"version":3,"sources":["player/Player.tsx","store/player.store.ts","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Player","player","onPointsChange","points","length","concat","className","name","map","p","i","type","defaultValue","undefined","onBlur","e","index","target","value","newPoints","handleChange","playersKey","App","useState","JSON","parse","localStorage","getItem","players","setStatePlayers","setItem","stringify","usePlayersState","setPlayers","handlePointsChange","reduce","a","b","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.510b2b29.chunk.js","sourcesContent":["import './Player.scss';\r\nimport {PlayerModel, Points} from \"../models/player.model\";\r\nimport React from \"react\";\r\n\r\ninterface PlayerProps {\r\n  player: PlayerModel;\r\n  onPointsChange: (points: Points[]) => void;\r\n}\r\n\r\nfunction Player({player, onPointsChange}: PlayerProps) {\r\n\r\n  if (player.points.length === 0 || player.points[player.points.length-1] !== null) {\r\n    onPointsChange(player.points.concat(null));\r\n  }\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>, index: number) => {\r\n    if (e.target.value) {\r\n      const newPoints = player.points.map((p, i) => i === index ? +e.target.value : p);\r\n      if (index === player.points.length-1) {\r\n        onPointsChange(newPoints.concat(null));\r\n      } else {\r\n        onPointsChange(newPoints);\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"player-container\">\r\n      <div className=\"player-name\">\r\n        {player.name}\r\n      </div>\r\n      { player.points.map((p, i) => (\r\n        <div className=\"player-points\" key={i}>\r\n          <input className=\"points-input\"\r\n                 type=\"number\"\r\n                 defaultValue={p || undefined}\r\n                 onBlur={(e) => handleChange(e, i)}/>\r\n        </div>\r\n      )) }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Player;\r\n","import {useEffect, useState} from \"react\";\r\nimport {PlayerModel} from \"../models/player.model\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\n\r\nconst defaultState: PlayerModel[] = [];\r\nconst playersKey = 'players';\r\n\r\nexport const usePlayersState = (): [PlayerModel[], (players: PlayerModel[]) => void] => {\r\n  const getPlayers = (): PlayerModel[] => {\r\n    return JSON.parse(localStorage.getItem(playersKey) || '[]') as PlayerModel[];\r\n  };\r\n\r\n  const setPlayers = (players: PlayerModel[]) => {\r\n    localStorage.setItem(playersKey, JSON.stringify(players));\r\n    setStatePlayers(players);\r\n  }\r\n\r\n  const [players, setStatePlayers] = useState<PlayerModel[]>(getPlayers());\r\n\r\n  return [players, setPlayers];\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport {Points} from \"./models/player.model\";\nimport Player from \"./player/Player\";\nimport {usePlayersState} from \"./store/player.store\";\n\nfunction App() {\n  const [players, setPlayers] = usePlayersState();\n\n  if(players.length === 0) {\n    setPlayers([\n      {name: \"Liam\", points: [null]}\n    ])\n  }\n\n  const handlePointsChange = (points: Points[], index: number) => {\n    setPlayers(\n      players.map((player, i) => i === index ? {...player, points} : player)\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"player-table\">\n        {players.map((player, index) => (\n          <Player key={index}\n                  player={player}\n                  onPointsChange={(points) => handlePointsChange(points, index)} />\n        ))}\n      </div>\n      <div className=\"player-scores\">\n        { players.map((player, i) =>\n            <div className=\"player-score\" key={i}>\n              {player.points.reduce((a: number, b: Points) => a + (b || 0), 0)}\n            </div>\n        ) }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}
{"version":3,"sources":["player/Player.tsx","store/player.store.ts","players-menu/PlayersMenu.tsx","delete-players-dialog/DeletePlayersDialog.tsx","App.tsx","serviceWorkerRegistration.ts","theme.ts","index.tsx"],"names":["Player","player","onPointsChange","points","length","concat","className","map","p","i","type","defaultValue","undefined","onBlur","e","index","target","value","newPoints","handleChange","playersKey","PlayersMenu","onAddPlayer","onClearPoints","React","useState","anchorEl","setAnchorEl","Fab","color","onClick","event","currentTarget","Menu","open","onClose","MenuItem","ListItemIcon","ListItemText","primary","Typography","DeletePlayersDialog","players","Dialog","fullWidth","List","ListItem","name","ListItemSecondaryAction","IconButton","App","useEffect","timeout","setTimeout","localStorage","setItem","JSON","stringify","clearTimeout","parse","getItem","setStatePlayers","usePlayersState","setPlayers","setPlayerName","handlePointsChange","reduce","a","b","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","theme","createTheme","palette","main","contrastText","secondary","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0f6ced1a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Player.scss';\r\nimport {PlayerModel, Points} from \"../models/player.model\";\r\n\r\ninterface PlayerProps {\r\n  player: PlayerModel;\r\n  onPointsChange: (points: Points[]) => void;\r\n}\r\n\r\nfunction Player({player, onPointsChange}: PlayerProps) {\r\n\r\n  if (player.points.length === 0 || player.points[player.points.length-1] !== null) {\r\n    onPointsChange(player.points.concat(null));\r\n  }\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>, index: number) => {\r\n    if (e.target.value) {\r\n      const newPoints = player.points.map((p, i) => i === index ? +e.target.value : p);\r\n      if (index === player.points.length-1) {\r\n        onPointsChange(newPoints.concat(null));\r\n      } else {\r\n        onPointsChange(newPoints);\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"player-container\">\r\n      { player.points.map((p, i) => (\r\n        <div className=\"player-points player-input-cell\" key={i}>\r\n          <input className={p !== null ? \"points-input\" : \"points-input empty-input\"}\r\n                 type=\"number\"\r\n                 defaultValue={p !== null ? p : undefined}\r\n                 onBlur={(e) => handleChange(e, i)}/>\r\n        </div>\r\n      )) }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Player;\r\n","import {useEffect, useState} from \"react\";\r\nimport {PlayerModel} from \"../models/player.model\";\r\n\r\n// const defaultState: PlayerModel[] = [];\r\nconst playersKey = 'players';\r\n\r\nexport const usePlayersState = (): [PlayerModel[], (players: PlayerModel[]) => void] => {\r\n  const getPlayers = (): PlayerModel[] => {\r\n    return JSON.parse(localStorage.getItem(playersKey) || '[]') as PlayerModel[];\r\n  };\r\n\r\n  const setPlayers = (players: PlayerModel[]) => {\r\n    // localStorage.setItem(playersKey, JSON.stringify(players));\r\n    setStatePlayers(players);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => localStorage.setItem(playersKey, JSON.stringify(players)), 1000);\r\n    return () => clearTimeout(timeout);\r\n  });\r\n\r\n  const [players, setStatePlayers] = useState<PlayerModel[]>(getPlayers());\r\n\r\n  return [players, setPlayers];\r\n}\r\n","import React from \"react\";\r\nimport \"./PlayersMenu.scss\";\r\nimport {Fab, ListItemIcon, ListItemText, Menu, MenuItem, Typography} from \"@material-ui/core\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\n\r\ninterface PlayersMenuProps {\r\n  onAddPlayer: () => void;\r\n  onClearPoints: () => void;\r\n}\r\n\r\nexport function PlayersMenu({onAddPlayer, onClearPoints}: PlayersMenuProps) {\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"fab-container\">\r\n        <Fab color=\"primary\" onClick={handleClick}>\r\n          <MoreVertIcon/>\r\n        </Fab>\r\n      </div>\r\n      <Menu anchorEl={anchorEl}\r\n            open={!!anchorEl}\r\n            onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={onAddPlayer}>\r\n          <ListItemIcon> <AddIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Add Player </Typography> } />\r\n        </MenuItem>\r\n        <MenuItem onClick={() => {}}>\r\n          <ListItemIcon> <PeopleIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Set Number of Players </Typography>} />\r\n        </MenuItem>\r\n        <MenuItem onClick={onClearPoints}>\r\n          <ListItemIcon> <RotateLeftIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Clear Points </Typography>} />\r\n        </MenuItem>\r\n        <MenuItem onClick={() => {}}>\r\n          <ListItemIcon> <ClearIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Remove Players </Typography>} />\r\n        </MenuItem>\r\n      </Menu>\r\n    </>\r\n  );\r\n}\r\n","import Dialog from '@material-ui/core/Dialog';\r\nimport {PlayerModel} from \"../models/player.model\";\r\nimport {IconButton, List, ListItem, ListItemSecondaryAction, ListItemText} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\ninterface DeletePlayersDialogProps {\r\n  players: PlayerModel[];\r\n  open: boolean;\r\n}\r\n\r\nexport function DeletePlayersDialog({players, open}: DeletePlayersDialogProps) {\r\n  return (\r\n    <Dialog open={open} fullWidth>\r\n      <List>\r\n        {players.map(player => (\r\n          <ListItem>\r\n            <ListItemText primary={player.name} />\r\n            <ListItemSecondaryAction>\r\n              <IconButton onClick={() => {}}>\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport {Points} from \"./models/player.model\";\nimport Player from \"./player/Player\";\nimport {usePlayersState} from \"./store/player.store\";\nimport {PlayersMenu} from \"./players-menu/PlayersMenu\";\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport {DeletePlayersDialog} from \"./delete-players-dialog/DeletePlayersDialog\";\n\nfunction App() {\n  const [players, setPlayers] = usePlayersState();\n\n  if (players.length === 0) {\n    setPlayers([{name: \"Liam\", points: [null]}]);\n  }\n\n  const handlePointsChange = (points: Points[], index: number) => {\n    setPlayers(\n      players.map((player, i) => i === index ? {...player, points} : player));\n  }\n\n  const addPlayer = () => {\n    setPlayers(players.concat({name: `Player ${players.length + 1}`, points: [null]}));\n  }\n\n  const clearPoints = () => {\n    setPlayers(players.map(player => ({...player, points: []})));\n  }\n\n  const setPlayerName = (name: string, index: number) => {\n    setPlayers(\n      players.map((player, i) => i === index ? {...player, name} : player));\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"player-table-container\">\n        <div className=\"player-names\">\n          {players.map((player, index) => (\n            <input key={index}\n                     className=\"player-name\"\n                     type=\"text\"\n                     defaultValue={player.name}\n                     onBlur={(event) => setPlayerName(event.target.value, index)}\n              />\n          ))}\n        </div>\n        <div className=\"player-table\">\n          {players.map((player, index) => (\n            <Player key={index}\n                    player={player}\n                    onPointsChange={(points) => handlePointsChange(points, index)}/>\n          ))}\n        </div>\n        <div className=\"player-scores\">\n          {players.map((player, i) =>\n            <div className=\"player-score player-header-cell\" key={i}>\n              {player.points.reduce((a: number, b: Points) => a + (b || 0), 0)}\n            </div>\n          )}\n        </div>\n      </div>\n      <PlayersMenu onAddPlayer={addPlayer}\n                   onClearPoints={clearPoints}/>\n      <DeletePlayersDialog players={players} open={true} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createTheme} from \"@material-ui/core\";\r\n\r\nexport const theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#00a0fc',\r\n      contrastText: '#ffffff'\r\n    },\r\n    secondary: {\r\n      main: '#00f38e',\r\n      contrastText: '#ffffff'\r\n    },\r\n  },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport {MuiThemeProvider} from '@material-ui/core';\nimport {theme} from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiThemeProvider theme={theme}>\n      <App />\n    </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}
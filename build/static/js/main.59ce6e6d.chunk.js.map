{"version":3,"sources":["store/game.store.ts","components/confirmation-dialog/ConfirmationDialog.tsx","components/delete-players-dialog/DeletePlayersDialog.tsx","components/leaderbord-dialog/LeaderboardDialog.tsx","points-table/player/Player.tsx","points-table/PointsTable.tsx","top-bar/TopBar.tsx","components/new-game-dialog/NewGameDialog.tsx","components/history-dialog/HistoryDialog.tsx","store/games.store.ts","App.tsx","serviceWorkerRegistration.ts","theme.ts","index.tsx"],"names":["gameKey","getStoredGame","storedGame","localStorage","getItem","parsed","JSON","parse","timestamp","Date","id","uuidv4","name","players","ConfirmationDialog","message","open","onConfirm","onDecline","Dialog","fullWidth","onClose","DialogContent","DialogActions","Button","color","onClick","DeletePlayersDialog","onDelete","useState","confirmationOpen","setConfirmationOpen","deleteId","setDeleteId","deleteName","setDeleteName","List","map","player","i","ListItem","ListItemText","primary","ListItemSecondaryAction","IconButton","Divider","LeaderboardDialog","order","initialOrder","sortOrder","setSortOrder","useEffect","setItem","sortedPlayers","position","score","points","reduce","a","b","sort","acc","cur","concat","Array","endIcon","index","ListItemAvatar","className","Avatar","Player","onPointsChange","readonly","length","p","type","value","onChange","e","newValue","target","newPoints","handleChange","currentTarget","select","disabled","PointsTable","onPlayerNameChange","TopBar","gameName","onAddPlayer","onClearPoints","onOpenDelete","onOpenLeaderBoard","onNewGame","onNameChange","onOpenHistory","React","anchorEl","setAnchorEl","event","Menu","MenuItem","ListItemIcon","Typography","NewGameDialog","game","onSubmit","newGame","setNewGame","focus","setFocus","inputEl","useRef","fullScreen","AppBar","Toolbar","FormControl","variant","InputLabel","OutlinedInput","inputRef","error","newName","endAdornment","InputAdornment","current","labelWidth","style","fontWeight","Fade","in","TextField","label","autoFocus","flex","handleNameChange","filter","_","handleDelete","justifyContent","emptyPlayerName","find","emptyGameName","canSubmit","HistoryDialog","onReturnPlaying","onDeleteGame","games","setGame","showGame","setShowGame","showConfirm","setShowConfirm","showConfirmReplay","setShowConfirmReplay","expanded","setExpanded","Accordion","AccordionSummary","expandIcon","toLocaleDateString","toLocaleTimeString","AccordionDetails","overflow","Table","size","TableHead","TableRow","pi","TableCell","TableBody","component","scope","AccordionActions","handleDeleteClick","handleReplayClick","handleDetailClick","handleReturnPlaying","GamesDatabase","version","stores","table","Dexie","App","setStateGame","stringify","useGameState","setStateGames","db","enqueueSnackbar","useSnackbar","transaction","orderBy","reverse","toArray","storedGames","loadGames","deleteGame","where","equals","delete","replayGame","addGame","add","useGamesState","deleteOpen","setDeleteOpen","leaderboardOpen","setLeaderboardOpen","newGameOpen","setNewGameOpen","historyOpen","setHistoryOpen","canSaveGame","oldGame","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","theme","createTheme","palette","main","contrastText","secondary","ReactDOM","render","StrictMode","maxSnack","dense","anchorOrigin","vertical","horizontal","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.59ce6e6d.chunk.js","sourcesContent":["import {useState} from \"react\";\r\nimport {GameModel} from \"../models/game.model\";\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nconst gameKey = 'game';\r\n\r\nconst getStoredGame = (): GameModel => {\r\n  const storedGame = localStorage.getItem(gameKey);\r\n  if (storedGame) {\r\n    const parsed = JSON.parse(storedGame) as GameModel;\r\n    return {...parsed, timestamp: new Date(parsed.timestamp)}\r\n  } else {\r\n    return {\r\n      id: uuidv4(),\r\n      name: 'New Game',\r\n      timestamp: new Date(),\r\n      players: []\r\n    };\r\n  }\r\n}\r\n\r\nexport const useGameState = (): [GameModel, (game: GameModel) => void] => {\r\n  const [game, setStateGame] = useState<GameModel>(getStoredGame);\r\n\r\n  const setGame = (newGame: GameModel) => {\r\n    setStateGame(newGame);\r\n    localStorage.setItem(gameKey, JSON.stringify(newGame));\r\n  }\r\n\r\n  return [game, setGame];\r\n}\r\n","import \"./ConfirmationDialog.scss\";\r\nimport React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {Button, DialogActions, DialogContent} from \"@material-ui/core\";\r\n\r\ninterface LeaderboardDialogProps {\r\n  message: string;\r\n  open: boolean;\r\n  onConfirm: () => void;\r\n  onDecline: () => void;\r\n}\r\n\r\nexport function ConfirmationDialog({message, open, onConfirm, onDecline}: LeaderboardDialogProps) {\r\n  return (\r\n    <Dialog open={open} fullWidth onClose={onDecline}>\r\n      <DialogContent>\r\n        {message}\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button color=\"primary\" onClick={onDecline}> No </Button>\r\n        <Button color=\"primary\" onClick={onConfirm}> Yes </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","import Dialog from '@material-ui/core/Dialog';\r\nimport {PlayerModel} from \"../../models/player.model\";\r\nimport {Button, Divider, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {useState} from \"react\";\r\nimport {ConfirmationDialog} from \"../confirmation-dialog/ConfirmationDialog\";\r\n\r\n\r\ninterface DeletePlayersDialogProps {\r\n  players: PlayerModel[];\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onDelete: (id: string) => void;\r\n}\r\n\r\nexport function DeletePlayersDialog({players, open, onClose, onDelete}: DeletePlayersDialogProps) {\r\n  const [confirmationOpen, setConfirmationOpen] = useState(false);\r\n  const [deleteId, setDeleteId] = useState('');\r\n  const [deleteName, setDeleteName] = useState('');\r\n\r\n  const handleDelete = (id: string, name: string) => {\r\n    setDeleteId(id);\r\n    setDeleteName(name);\r\n    setConfirmationOpen(true);\r\n  }\r\n\r\n  const handleConfirm = () => {\r\n    setConfirmationOpen(false);\r\n    onDelete(deleteId);\r\n  }\r\n\r\n  return (\r\n    <Dialog open={open}\r\n            fullWidth\r\n            onClose={onClose}>\r\n      <List>\r\n        {players.map((player, i) => (\r\n          <ListItem key={i}>\r\n            <ListItemText primary={player.name}/>\r\n            <ListItemSecondaryAction>\r\n              <IconButton onClick={() => handleDelete(player.id, player.name)}>\r\n                <DeleteIcon color=\"primary\"/>\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider/>\r\n      <Button color=\"primary\" onClick={onClose}> Close </Button>\r\n      <ConfirmationDialog message={`Are you sure you want to delete ${deleteName}?`}\r\n                          open={confirmationOpen}\r\n                          onConfirm={handleConfirm}\r\n                          onDecline={() => setConfirmationOpen(false)}\r\n      />\r\n    </Dialog>\r\n  );\r\n}\r\n","import \"./LeaderboardDialog.scss\";\r\nimport {PlayerModel, Points} from \"../../models/player.model\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\n\r\ninterface LeaderboardDialogProps {\r\n  players: PlayerModel[];\r\n  open: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\ninterface PlayerScores {\r\n  position: number;\r\n  name: string;\r\n  score: number;\r\n}\r\n\r\ntype Order = 'asc' | 'desc';\r\n\r\nconst initialOrder = (): Order => {\r\n  const order = localStorage.getItem('order');\r\n  return order === 'asc' || order === 'desc' ? order : 'asc';\r\n}\r\n\r\nexport function LeaderboardDialog({players, open, onClose}: LeaderboardDialogProps) {\r\n  const [sortOrder, setSortOrder] = useState<Order>(initialOrder());\r\n\r\n  useEffect(() => localStorage.setItem('order', sortOrder), [sortOrder]);\r\n\r\n  let sortedPlayers = players\r\n    .map<PlayerScores>(player => ({\r\n      position: 0,\r\n      name: player.name,\r\n      score: player.points.reduce((a: number, b: Points) => a + (b || 0), 0)\r\n    }))\r\n    .sort((a, b) => sortOrder === 'asc' ? (a.score - b.score) : (b.score - a.score))\r\n    .reduce((acc, cur, i) => {\r\n      if (i > 0 && acc[i-1].score === cur.score) {\r\n        return acc.concat({...cur, position: acc[i-1].position});\r\n      } else {\r\n        return acc.concat({...cur, position: i+1});\r\n      }\r\n    }, Array<PlayerScores>());\r\n\r\n  return (\r\n    <Dialog open={open} fullWidth onClose={onClose}>\r\n      {\r\n        sortOrder === 'asc' ? (\r\n          <Button\r\n            color=\"primary\"\r\n            endIcon={<ArrowUpwardIcon/>}\r\n            onClick={() => setSortOrder('desc')}\r\n          >\r\n            Highest First\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            color=\"primary\"\r\n            endIcon={<ArrowDownwardIcon/>}\r\n            onClick={() => setSortOrder('asc')}\r\n          >\r\n            Lowest First\r\n          </Button>\r\n        )\r\n      }\r\n      <Divider/>\r\n      <List>\r\n        {sortedPlayers.map((player, index) => (\r\n          <ListItem key={index}>\r\n            <ListItemAvatar className={player.position <= 3 ? ('place-' + player.position) : 'default-place'}>\r\n              <Avatar> {player.score} </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={player.name}/>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider/>\r\n      <Button color=\"primary\" onClick={onClose}> Close </Button>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport './Player.scss';\r\nimport {PlayerModel, Points} from \"../../models/player.model\";\r\n\r\ninterface PlayerProps {\r\n  player: PlayerModel;\r\n  onPointsChange: (points: Points[]) => void;\r\n  readonly: boolean;\r\n}\r\n\r\nfunction Player({player, onPointsChange, readonly}: PlayerProps) {\r\n\r\n  if (player.points.length === 0 || player.points[player.points.length-1] !== null) {\r\n    onPointsChange(player.points.concat(null));\r\n  }\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>, index: number) => {\r\n    const newValue = e.target.value ? +e.target.value : null;\r\n    const newPoints = player.points.map((p, i) => i === index ? newValue : p);\r\n    if (index === player.points.length-1) {\r\n      onPointsChange(newPoints.concat(null));\r\n    } else {\r\n      onPointsChange(newPoints);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"player-container\">\r\n      { player.points.map((p, i) => (\r\n        <div className=\"player-points player-input-cell\" key={i}>\r\n          {(!readonly || p !== null) && (\r\n            <input className={p !== null ? \"points-input\" : \"points-input empty-input\"}\r\n                   type=\"number\"\r\n                   value={p !== null ? p : \"\"}\r\n                   onChange={(e) => handleChange(e, i)}\r\n                   onClick={(e) => {e.currentTarget.select()}}\r\n                   disabled={readonly}\r\n            />\r\n          )}\r\n        </div>\r\n      )) }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Player;\r\n","import './PointsTable.scss';\r\nimport Player from \"./player/Player\";\r\nimport {PlayerModel, Points} from \"../models/player.model\";\r\nimport React from \"react\";\r\n\r\ninterface PointsTableProps {\r\n  players: PlayerModel[];\r\n  onPlayerNameChange: (name: string, id: string) => void;\r\n  onPointsChange: (points: Points[], id: string) => void;\r\n  readonly: boolean;\r\n}\r\n\r\nexport function PointsTable({players, onPlayerNameChange, onPointsChange, readonly}: PointsTableProps) {\r\n  return (\r\n    <div className=\"player-table-container\">\r\n      <div className=\"player-names\">\r\n        {players.map((player, index) => (\r\n          <input className=\"player-name\" type=\"text\"\r\n                 disabled={readonly}\r\n                 key={index}\r\n                 value={player.name}\r\n                 onChange={(e) => onPlayerNameChange(e.target.value, player.id)}\r\n                 onClick={(e) => {e.currentTarget.select()}}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"player-table\">\r\n        {players.map((player, i) => (\r\n          <Player key={i}\r\n                  player={player}\r\n                  onPointsChange={(points) => onPointsChange(points, player.id)}\r\n                  readonly={readonly}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"player-scores\">\r\n        {players.map((player, i) =>\r\n          <div className=\"player-score player-header-cell\" key={i}>\r\n            {player.points.reduce((a: number, b: Points) => a + (b || 0), 0)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import './TopBar.scss';\r\nimport {IconButton, ListItemIcon, ListItemText, Menu, MenuItem, Typography} from \"@material-ui/core\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport GradeIcon from \"@material-ui/icons/Grade\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport {ConfirmationDialog} from \"../components/confirmation-dialog/ConfirmationDialog\";\r\nimport React from \"react\";\r\n\r\ninterface TopBarProps {\r\n  gameName: string;\r\n  onAddPlayer: () => void;\r\n  onClearPoints: () => void;\r\n  onOpenDelete: () => void;\r\n  onOpenLeaderBoard: () => void;\r\n  onNewGame: () => void;\r\n  onNameChange: (name: string) => void;\r\n  onOpenHistory: () => void;\r\n}\r\n\r\nexport function TopBar({\r\n                         gameName,\r\n                         onAddPlayer,\r\n                         onClearPoints,\r\n                         onOpenDelete,\r\n                         onOpenLeaderBoard,\r\n                         onNewGame,\r\n                         onNameChange,\r\n                         onOpenHistory\r\n}: TopBarProps) {\r\n  const [confirmationOpen, setConfirmationOpen] = React.useState(false);\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClearPoints = () => {\r\n    setConfirmationOpen(true);\r\n  }\r\n\r\n  const handleClearConfirmation = () => {\r\n    setConfirmationOpen(false);\r\n    onClearPoints();\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"top-bar\">\r\n        <div className=\"empty-container\"/>\r\n        <input type=\"text\" className=\"game-name-input\"\r\n               value={gameName}\r\n               onChange={e => onNameChange(e.target.value)}\r\n               onClick={e => {e.currentTarget.select()}}\r\n        />\r\n        <IconButton onClick={handleClick}>\r\n          <MoreVertIcon className=\"top-bar-icon\"/>\r\n        </IconButton>\r\n      </div>\r\n      <Menu anchorEl={anchorEl}\r\n               open={!!anchorEl}\r\n               onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={handleClearPoints}>\r\n          <ListItemIcon> <RotateLeftIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Clear Points </Typography>}/>\r\n        </MenuItem>\r\n        <MenuItem onClick={onOpenDelete}>\r\n          <ListItemIcon> <DeleteIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Remove Players </Typography>}/>\r\n        </MenuItem>\r\n        <MenuItem onClick={onAddPlayer}>\r\n          <ListItemIcon> <AddIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Add Player </Typography>}/>\r\n        </MenuItem>\r\n        <MenuItem onClick={onOpenLeaderBoard}>\r\n          <ListItemIcon> <GradeIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Leaderboard </Typography>}/>\r\n        </MenuItem>\r\n        <MenuItem onClick={onNewGame}>\r\n          <ListItemIcon> <AddCircleIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> New Game </Typography>} />\r\n        </MenuItem>\r\n        <MenuItem onClick={onOpenHistory}>\r\n          <ListItemIcon> <HistoryIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> History </Typography>} />\r\n        </MenuItem>\r\n      </Menu>\r\n      <ConfirmationDialog message=\"Are you sure you want to clear all points?\"\r\n                          open={confirmationOpen}\r\n                          onConfirm={handleClearConfirmation}\r\n                          onDecline={() => setConfirmationOpen(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import './NewGameDialog.scss';\r\nimport {\r\n  AppBar,\r\n  Button,\r\n  Dialog,\r\n  Fade,\r\n  FormControl,\r\n  IconButton,\r\n  InputAdornment,\r\n  InputLabel,\r\n  List,\r\n  ListItem,\r\n  OutlinedInput,\r\n  TextField,\r\n  Toolbar,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport {GameModel} from \"../../models/game.model\";\r\n\r\ninterface NewGameDialogProps {\r\n  open: boolean;\r\n  game: GameModel;\r\n  onClose: () => void;\r\n  onSubmit: (game: GameModel) => void;\r\n}\r\n\r\nexport function NewGameDialog({open, game, onClose, onSubmit}: NewGameDialogProps) {\r\n  const [newGame, setNewGame] = useState<GameModel>({id: '', timestamp: new Date(), name: '', players: []});\r\n  const [focus, setFocus] = useState<boolean>(false);\r\n  const inputEl = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    open && setNewGame({\r\n      id: uuidv4(),\r\n      timestamp: new Date(),\r\n      name: game.name,\r\n      players: game.players.map(player => ({...player, points: [null]}))\r\n    });\r\n  }, [game, open]);\r\n\r\n  const handleDelete = (index: number) => {\r\n    setNewGame({\r\n      ...newGame,\r\n      players: newGame.players.filter((_, i) => i !== index)\r\n    });\r\n  }\r\n\r\n  const handleClear = () => {\r\n    inputEl?.current?.focus();\r\n    setNewGame({...newGame, name: ''});\r\n  }\r\n\r\n  const handleGameNameChange = (newName: string) => {\r\n    setNewGame({\r\n      ...newGame,\r\n      name: newName\r\n    });\r\n  }\r\n\r\n  const handleNameChange = (name: string, index: number) => {\r\n    setNewGame({\r\n      ...newGame,\r\n      players: newGame.players.map((player, i) => index === i ? {...player, name} : player)\r\n    });\r\n  }\r\n\r\n  const addPlayer = () => {\r\n    setFocus(true);\r\n    setNewGame({\r\n      ...newGame,\r\n      players: newGame.players.concat({id: uuidv4(), name: '', points: [null]})\r\n    });\r\n  }\r\n\r\n  const canSubmit = (): boolean => {\r\n    const emptyPlayerName = !!newGame.players.find(player => !player.name);\r\n    const emptyGameName = !newGame.name;\r\n    return emptyPlayerName || emptyGameName;\r\n  }\r\n\r\n  return (\r\n    <Dialog fullScreen\r\n            open={open}\r\n            onClose={onClose}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className=\"new-game-toolbar\">\r\n          <IconButton onClick={onClose} color=\"inherit\">\r\n            <CloseIcon/>\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className=\"new-game-list\">\r\n        <List>\r\n          <ListItem>\r\n            <FormControl variant=\"outlined\" className=\"player-name-form-control\">\r\n              <InputLabel> Game Name </InputLabel>\r\n              <OutlinedInput type=\"text\"\r\n                             inputRef={inputEl}\r\n                             value={newGame.name}\r\n                             error={!newGame.name}\r\n                             onChange={e => handleGameNameChange(e.target.value)}\r\n                             endAdornment={\r\n                               <InputAdornment position=\"end\">\r\n                                 <IconButton onClick={handleClear}>\r\n                                   <CloseIcon color=\"primary\"/>\r\n                                 </IconButton>\r\n                               </InputAdornment>\r\n                             }\r\n                             labelWidth={93}\r\n              />\r\n            </FormControl>\r\n          </ListItem>\r\n          <ListItem>\r\n            <Typography style={{fontWeight: \"bold\"}}> Players </Typography>\r\n          </ListItem>\r\n          {newGame.players.map((player, index, players) => (\r\n            <Fade key={index} in>\r\n              <ListItem>\r\n                <TextField label=\"Player Name\" variant=\"outlined\"\r\n                           autoFocus={focus && index === players.length - 1}\r\n                           value={player.name}\r\n                           style={{flex: \"1\"}}\r\n                           onChange={(e) => handleNameChange(e.target.value, index)}\r\n                           error={!player.name}\r\n                />\r\n                <IconButton onClick={() => handleDelete(index)}>\r\n                  <DeleteIcon color=\"primary\"/>\r\n                </IconButton>\r\n              </ListItem>\r\n            </Fade>\r\n          ))}\r\n          <ListItem style={{justifyContent: \"center\"}}>\r\n            <IconButton onClick={addPlayer}>\r\n              <AddIcon color=\"primary\"/>\r\n            </IconButton>\r\n          </ListItem>\r\n        </List>\r\n      </div>\r\n      <Button color=\"primary\"\r\n              variant=\"contained\"\r\n              onClick={() => onSubmit(newGame)}\r\n              disabled={canSubmit()}\r\n      >\r\n        New Game\r\n      </Button>\r\n    </Dialog>\r\n  );\r\n}\r\n","import './HistoryDialog.scss';\r\nimport {\r\n  Dialog,\r\n  TableHead,\r\n  Table,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Accordion,\r\n  AccordionSummary,\r\n  Typography,\r\n  AccordionDetails,\r\n  AccordionActions,\r\n  IconButton\r\n} from \"@material-ui/core\";\r\nimport {useState} from \"react\";\r\nimport {GameModel} from \"../../models/game.model\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {Points} from \"../../models/player.model\";\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport {PointsTable} from \"../../points-table/PointsTable\";\r\nimport {ConfirmationDialog} from \"../confirmation-dialog/ConfirmationDialog\";\r\n\r\ninterface NewGameDialogProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onReturnPlaying: (game: GameModel) => void;\r\n  onDeleteGame: (id: string) => void;\r\n  games: GameModel[];\r\n}\r\n\r\nexport function HistoryDialog({open, onClose, onReturnPlaying, onDeleteGame, games}: NewGameDialogProps) {\r\n  const [game, setGame] = useState<GameModel | null>(null);\r\n  const [showGame, setShowGame] = useState(false);\r\n  const [showConfirm, setShowConfirm] = useState(false);\r\n  const [showConfirmReplay, setShowConfirmReplay] = useState(false);\r\n  const [expanded, setExpanded] = useState<number | null>(null);\r\n\r\n  const handleClose = () => {\r\n    setExpanded(null);\r\n    onClose();\r\n  }\r\n\r\n  const handleReturnPlaying = (game: GameModel) => {\r\n    setExpanded(null);\r\n    onReturnPlaying(game);\r\n  }\r\n\r\n  const handleDeleteGame = (id: string) => {\r\n    setExpanded(null);\r\n    onDeleteGame(id);\r\n  }\r\n\r\n  const handleDetailClick = (game: GameModel) => {\r\n    setGame(game);\r\n    setShowGame(true);\r\n  }\r\n\r\n  const handleReplayClick = (game: GameModel) => {\r\n    setGame(game);\r\n    setShowConfirmReplay(true);\r\n  }\r\n\r\n  const handleReplay = () => {\r\n    game && handleReturnPlaying(game);\r\n    setShowConfirmReplay(false);\r\n  }\r\n\r\n  const handleDeleteClick = (game: GameModel) => {\r\n    setGame(game);\r\n    setShowConfirm(true);\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    setShowConfirm(false);\r\n    game && handleDeleteGame(game.id);\r\n  }\r\n\r\n  const handleExpandedChange = (index: number) => {\r\n    setExpanded(expanded === index ? null : index);\r\n  }\r\n\r\n  return (\r\n    <Dialog fullWidth\r\n            open={open}\r\n            onClose={handleClose}>\r\n      {games.length <= 0 && (\r\n        <Typography>No past games found!</Typography>\r\n      )}\r\n      {games.map((game, i) => (\r\n        <Accordion key={i} expanded={expanded === i} onChange={() => handleExpandedChange(i)}>\r\n          <AccordionSummary expandIcon={<ExpandMoreIcon color=\"primary\"/>}>\r\n            <div className=\"summary-container\">\r\n              <Typography>{game.name}</Typography>\r\n              <Typography className=\"summary-subtitle\" variant=\"caption\">\r\n                {game.timestamp.toLocaleDateString()} - {game.timestamp.toLocaleTimeString()}\r\n              </Typography>\r\n            </div>\r\n          </AccordionSummary>\r\n          <AccordionDetails style={{overflow: \"auto\"}}>\r\n            <Table size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  {game.players.map((player, pi) => (\r\n                    <TableCell key={pi}>{player.name}</TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                <TableRow>\r\n                  {game.players.map((player, pi) => (\r\n                    <TableCell key={pi} component=\"th\" scope=\"row\">\r\n                      {player.points.reduce((a: number, b: Points) => a + (b || 0), 0)}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n          </AccordionDetails>\r\n          <AccordionActions>\r\n            <div className=\"history-actions\">\r\n              <IconButton onClick={() => handleDeleteClick(game)}>\r\n                <DeleteIcon color=\"primary\"/>\r\n              </IconButton>\r\n              <IconButton onClick={() => handleReplayClick(game)}>\r\n                <ReplayIcon color=\"primary\"/>\r\n              </IconButton>\r\n              <IconButton onClick={() => handleDetailClick(game)}>\r\n                <ZoomInIcon color=\"primary\"/>\r\n              </IconButton>\r\n            </div>\r\n          </AccordionActions>\r\n        </Accordion>\r\n      ))}\r\n      <Dialog open={showGame}\r\n              onClose={() => setShowGame(false)}>\r\n        <PointsTable players={game?.players || []}\r\n                     onPlayerNameChange={() => {}}\r\n                     onPointsChange={() => {}}\r\n                     readonly={true}\r\n        />\r\n      </Dialog>\r\n      <ConfirmationDialog message={`Are you sure you want to delete ${game?.name}?`}\r\n                          open={showConfirm}\r\n                          onConfirm={handleDelete}\r\n                          onDecline={() => setShowConfirm(false)}\r\n      />\r\n      <ConfirmationDialog message={`Are you sure you want to replay ${game?.name}?`}\r\n                          open={showConfirmReplay}\r\n                          onConfirm={handleReplay}\r\n                          onDecline={() => setShowConfirmReplay(false)}\r\n      />\r\n    </Dialog>\r\n  );\r\n}\r\n","import {GameModel} from \"../models/game.model\";\r\nimport {useEffect, useState} from \"react\";\r\nimport Dexie from \"dexie\";\r\nimport {useSnackbar} from \"notistack\";\r\n\r\nclass GamesDatabase extends Dexie {\r\n  public games: Dexie.Table<GameModel, string>;\r\n\r\n  public constructor() {\r\n    super(\"GamesDatabase\");\r\n    this.version(1).stores({\r\n      games: \"id,timestamp,name,players\"\r\n    });\r\n    this.games = this.table('games');\r\n  }\r\n}\r\n\r\nexport interface GameStateProps {\r\n  games: GameModel[];\r\n  deleteGame: (id: string) => void;\r\n  replayGame: (id: string) => void;\r\n  addGame: (game: GameModel) => void;\r\n}\r\n\r\nexport const useGamesState = (): GameStateProps => {\r\n  const [games, setStateGames] = useState<GameModel[]>([]);\r\n  const [db] = useState(new GamesDatabase());\r\n  const {enqueueSnackbar} = useSnackbar();\r\n\r\n  useEffect(() => {\r\n    db.transaction('r', db.games, async () => {\r\n      const storedGames = await db.games.orderBy(\"timestamp\").reverse().toArray();\r\n      setStateGames(storedGames);\r\n    });\r\n  }, [db]);\r\n\r\n  const loadGames = async () => {\r\n    const storedGames = await db.games.orderBy(\"timestamp\").reverse().toArray();\r\n    setStateGames(storedGames);\r\n  }\r\n\r\n  const addGame = (newGame: GameModel) => {\r\n    db.transaction('rw', db.games, async () => {\r\n      await db.games.add(newGame);\r\n      await loadGames();\r\n    });\r\n  }\r\n\r\n  const deleteGame = async (id: string) => {\r\n    db.transaction('rw', db.games, async () => {\r\n      await db.games.where(\"id\").equals(id).delete();\r\n      await loadGames();\r\n      enqueueSnackbar(`Successfully deleted game`, {variant: \"success\"});\r\n    });\r\n  }\r\n\r\n  const replayGame = async (id: string) => {\r\n    db.transaction('rw', db.games, async () => {\r\n      await db.games.where(\"id\").equals(id).delete();\r\n      await loadGames();\r\n      enqueueSnackbar(`Successfully loaded old game`, {variant: \"success\"});\r\n    });\r\n  }\r\n\r\n  return {games, deleteGame, replayGame, addGame};\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.scss';\r\nimport {Points} from \"./models/player.model\";\r\nimport {useGameState} from \"./store/game.store\";\r\nimport {DeletePlayersDialog} from \"./components/delete-players-dialog/DeletePlayersDialog\";\r\nimport {useSnackbar} from \"notistack\";\r\nimport {LeaderboardDialog} from \"./components/leaderbord-dialog/LeaderboardDialog\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {PointsTable} from \"./points-table/PointsTable\";\r\nimport {TopBar} from \"./top-bar/TopBar\";\r\nimport {NewGameDialog} from \"./components/new-game-dialog/NewGameDialog\";\r\nimport {HistoryDialog} from \"./components/history-dialog/HistoryDialog\";\r\nimport {useGamesState} from \"./store/games.store\";\r\nimport {GameModel} from \"./models/game.model\";\r\n\r\nfunction App() {\r\n  const [game, setGame] = useGameState();\r\n  const {games, deleteGame, replayGame, addGame} = useGamesState();\r\n  const [deleteOpen, setDeleteOpen] = useState(false);\r\n  const [leaderboardOpen, setLeaderboardOpen] = useState(false);\r\n  const [newGameOpen, setNewGameOpen] = useState(false);\r\n  const [historyOpen, setHistoryOpen] = useState(false);\r\n  const {enqueueSnackbar} = useSnackbar();\r\n\r\n  if (game.players.length === 0) {\r\n    setGame({\r\n      ...game,\r\n      players: [{id: uuidv4(), name: \"Liam\", points: [null]}]\r\n    });\r\n  }\r\n\r\n  const setGameName = (name: string) => {\r\n    setGame({...game, name})\r\n  }\r\n\r\n  const canSaveGame = (game: GameModel): boolean => {\r\n    return game\r\n      .players\r\n      .map(player => player.points.filter(points => points !== null)).filter(points => points.length > 0)\r\n      .length >= game.players.length;\r\n  }\r\n\r\n  const setNewGame = (newGame: GameModel) => {\r\n    if (canSaveGame(game)) {\r\n      addGame(game);\r\n    }\r\n    setGame({...newGame, id: uuidv4(), timestamp: new Date(), players: newGame.players});\r\n    setNewGameOpen(false);\r\n  }\r\n\r\n  const setOldGame = (oldGame: GameModel) => {\r\n    if (canSaveGame(game)) {\r\n      addGame(game);\r\n    }\r\n    replayGame(oldGame.id);\r\n    setGame({...oldGame, timestamp: new Date()});\r\n    setHistoryOpen(false);\r\n  }\r\n\r\n  const deleteOldGame = (id: string) => {\r\n    deleteGame(id);\r\n    setHistoryOpen(false);\r\n  }\r\n\r\n  const handlePointsChange = (points: Points[], id: string) => {\r\n    setGame({\r\n      ...game,\r\n      players: game.players.map(player => player.id === id ? {...player, points} : player)\r\n    });\r\n  }\r\n\r\n  const addPlayer = () => {\r\n    setGame({\r\n      ...game,\r\n      players: game.players.concat({id: uuidv4(), name: `Player ${game.players.length + 1}`, points: [null]})\r\n    });\r\n    enqueueSnackbar(`${game.players.length + 1} players`);\r\n  }\r\n\r\n  const clearPoints = () => {\r\n    setNewGame({\r\n      ...game,\r\n      players: game.players.map(player => ({...player, points: [null]}))\r\n    });\r\n  }\r\n\r\n  const setPlayerName = (name: string, id: string) => {\r\n    setGame({\r\n      ...game,\r\n      players: game.players.map(player => player.id === id ? {...player, name} : player)\r\n    });\r\n  }\r\n\r\n  const deletePlayer = (id: string) => {\r\n    setGame({\r\n      ...game,\r\n      players: game.players.filter(player => player.id !== id)\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <TopBar gameName={game.name}\r\n              onNameChange={setGameName}\r\n              onAddPlayer={addPlayer}\r\n              onClearPoints={clearPoints}\r\n              onOpenDelete={() => setDeleteOpen(true)}\r\n              onOpenLeaderBoard={() => setLeaderboardOpen(true)}\r\n              onNewGame={() => setNewGameOpen(true)}\r\n              onOpenHistory={() => setHistoryOpen(true)}\r\n      />\r\n      <PointsTable onPlayerNameChange={setPlayerName}\r\n                   onPointsChange={handlePointsChange}\r\n                   players={game.players}\r\n                   readonly={false}\r\n      />\r\n      <DeletePlayersDialog players={game.players}\r\n                           open={deleteOpen}\r\n                           onDelete={deletePlayer}\r\n                           onClose={() => setDeleteOpen(false)}\r\n      />\r\n      <LeaderboardDialog players={game.players}\r\n                         open={leaderboardOpen}\r\n                         onClose={() => setLeaderboardOpen(false)}\r\n      />\r\n      <NewGameDialog open={newGameOpen}\r\n                     game={game}\r\n                     onClose={() => setNewGameOpen(false)}\r\n                     onSubmit={setNewGame}\r\n      />\r\n      <HistoryDialog open={historyOpen}\r\n                     onClose={() => setHistoryOpen(false)}\r\n                     onReturnPlaying={setOldGame}\r\n                     onDeleteGame={deleteOldGame}\r\n                     games={games}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createTheme} from \"@material-ui/core\";\r\n\r\nexport const theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#3F51B5',\r\n      contrastText: '#ffffff',\r\n    },\r\n    secondary: {\r\n      main: '#FFA000',\r\n      contrastText: '#ffffff'\r\n    },\r\n  },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport {MuiThemeProvider} from '@material-ui/core';\nimport {theme} from \"./theme\";\nimport {SnackbarProvider} from \"notistack\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiThemeProvider theme={theme}>\n      <SnackbarProvider maxSnack={1}\n                        dense={true}\n                        anchorOrigin={{\n                          vertical: 'bottom',\n                          horizontal: 'center',\n                        }}\n      >\n        <App/>\n      </SnackbarProvider>\n    </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}
{"version":3,"sources":["store/game.store.ts","components/confirmation-dialog/ConfirmationDialog.tsx","components/delete-players-dialog/DeletePlayersDialog.tsx","components/leaderbord-dialog/LeaderboardDialog.tsx","points-table/player/Player.tsx","points-table/PointsTable.tsx","top-bar/TopBar.tsx","components/new-game-dialog/NewGameDialog.tsx","store/game.db.ts","components/history-dialog/HistoryDialog.tsx","App.tsx","serviceWorkerRegistration.ts","theme.ts","index.tsx"],"names":["gameKey","initialGame","JSON","parse","localStorage","getItem","stringify","id","uuidv4","name","Date","toLocaleString","players","ConfirmationDialog","message","open","onConfirm","onDecline","Dialog","fullWidth","onClose","DialogContent","DialogActions","Button","color","onClick","DeletePlayersDialog","onDelete","useState","confirmationOpen","setConfirmationOpen","deleteId","setDeleteId","deleteName","setDeleteName","List","map","player","i","ListItem","ListItemText","primary","ListItemSecondaryAction","IconButton","Divider","LeaderboardDialog","sortOrder","setSortOrder","sortedPlayers","position","score","points","reduce","a","b","sort","acc","cur","concat","Array","endIcon","index","ListItemAvatar","className","Avatar","Player","onPointsChange","length","p","type","value","onChange","e","newValue","target","newPoints","handleChange","currentTarget","select","PointsTable","onPlayerNameChange","TopBar","gameName","onAddPlayer","onClearPoints","onOpenDelete","onOpenLeaderBoard","onNewGame","onNameChange","onOpenHistory","React","anchorEl","setAnchorEl","event","Menu","MenuItem","ListItemIcon","Typography","NewGameDialog","onSubmit","newPlayers","setNewPlayers","useEffect","TextField","label","variant","handleNameChange","filter","_","handleDelete","button","style","justifyContent","getAllGames","db","Promise","resolve","reject","request","transaction","objectStore","getAll","onsuccess","games","result","game","timestamp","getTime","onerror","error","deleteGame","indexedDB","delete","HistoryDialog","onReturnPlaying","onDeleteGame","setGames","onupgradeneeded","createObjectStore","keyPath","storedGames","Accordion","AccordionSummary","expandIcon","toLocaleDateString","toLocaleTimeString","AccordionDetails","Table","size","TableHead","TableRow","pi","TableCell","TableBody","component","scope","AccordionActions","App","setStateGame","timeout","setTimeout","setItem","clearTimeout","newGame","useGameState","setGame","deleteOpen","setDeleteOpen","leaderboardOpen","setLeaderboardOpen","newGameOpen","setNewGameOpen","historyOpen","setHistoryOpen","enqueueSnackbar","useSnackbar","put","saveGame","oldGame","deleteOldGame","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","theme","createTheme","palette","main","contrastText","secondary","ReactDOM","render","StrictMode","maxSnack","dense","anchorOrigin","vertical","horizontal","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f7e95912.chunk.js","sourcesContent":["import {useEffect, useState} from \"react\";\r\nimport {GameModel} from \"../models/game.model\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst gameKey = 'game';\r\n\r\nconst initialGame: GameModel = JSON.parse(\r\n  localStorage.getItem(gameKey) || JSON.stringify({id: uuidv4(), name: new Date().toLocaleString(), players: []})) as GameModel;\r\n\r\nexport const useGameState = (): [GameModel, (game: GameModel) => void] => {\r\n  const [game, setStateGame] = useState<GameModel>(initialGame);\r\n\r\n  const setGame = (newGame: GameModel) => {\r\n    setStateGame(newGame);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => localStorage.setItem(gameKey, JSON.stringify(game)), 1000);\r\n    return () => clearTimeout(timeout);\r\n  });\r\n\r\n  return [game, setGame];\r\n}\r\n","import \"./ConfirmationDialog.scss\";\r\nimport React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {Button, DialogActions, DialogContent} from \"@material-ui/core\";\r\n\r\ninterface LeaderboardDialogProps {\r\n  message: string;\r\n  open: boolean;\r\n  onConfirm: () => void;\r\n  onDecline: () => void;\r\n}\r\n\r\nexport function ConfirmationDialog({message, open, onConfirm, onDecline}: LeaderboardDialogProps) {\r\n  return (\r\n    <Dialog open={open} fullWidth onClose={onDecline}>\r\n      <DialogContent>\r\n        {message}\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button color=\"primary\" onClick={onDecline}> No </Button>\r\n        <Button color=\"primary\" onClick={onConfirm}> Yes </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","import Dialog from '@material-ui/core/Dialog';\r\nimport {PlayerModel} from \"../../models/player.model\";\r\nimport {Button, Divider, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {useState} from \"react\";\r\nimport {ConfirmationDialog} from \"../confirmation-dialog/ConfirmationDialog\";\r\n\r\n\r\ninterface DeletePlayersDialogProps {\r\n  players: PlayerModel[];\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onDelete: (id: string) => void;\r\n}\r\n\r\nexport function DeletePlayersDialog({players, open, onClose, onDelete}: DeletePlayersDialogProps) {\r\n  const [confirmationOpen, setConfirmationOpen] = useState(false);\r\n  const [deleteId, setDeleteId] = useState('');\r\n  const [deleteName, setDeleteName] = useState('');\r\n\r\n  const handleDelete = (id: string, name: string) => {\r\n    setDeleteId(id);\r\n    setDeleteName(name);\r\n    setConfirmationOpen(true);\r\n  }\r\n\r\n  const handleConfirm = () => {\r\n    setConfirmationOpen(false);\r\n    onDelete(deleteId);\r\n  }\r\n\r\n  return (\r\n    <Dialog open={open}\r\n            fullWidth\r\n            onClose={onClose}>\r\n      <List>\r\n        {players.map((player, i) => (\r\n          <ListItem key={i}>\r\n            <ListItemText primary={player.name}/>\r\n            <ListItemSecondaryAction>\r\n              <IconButton onClick={() => handleDelete(player.id, player.name)}>\r\n                <DeleteIcon color=\"primary\"/>\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider/>\r\n      <Button color=\"primary\" onClick={onClose}> Close </Button>\r\n      <ConfirmationDialog message={`Are you sure you want to delete ${deleteName}?`}\r\n                          open={confirmationOpen}\r\n                          onConfirm={handleConfirm}\r\n                          onDecline={() => setConfirmationOpen(false)}\r\n      />\r\n    </Dialog>\r\n  );\r\n}\r\n","import \"./LeaderboardDialog.scss\";\r\nimport {PlayerModel, Points} from \"../../models/player.model\";\r\nimport React, {useState} from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\n\r\ninterface LeaderboardDialogProps {\r\n  players: PlayerModel[];\r\n  open: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\ninterface PlayerScores {\r\n  position: number;\r\n  name: string;\r\n  score: number;\r\n}\r\n\r\nexport function LeaderboardDialog({players, open, onClose}: LeaderboardDialogProps) {\r\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\r\n\r\n  let sortedPlayers = players\r\n    .map<PlayerScores>(player => ({\r\n      position: 0,\r\n      name: player.name,\r\n      score: player.points.reduce((a: number, b: Points) => a + (b || 0), 0)\r\n    }))\r\n    .sort((a, b) => sortOrder === 'asc' ? (a.score - b.score) : (b.score - a.score))\r\n    .reduce((acc, cur, i) => {\r\n      if (i > 0 && acc[i-1].score === cur.score) {\r\n        return acc.concat({...cur, position: acc[i-1].position});\r\n      } else {\r\n        return acc.concat({...cur, position: i+1});\r\n      }\r\n    }, Array<PlayerScores>());\r\n\r\n  return (\r\n    <Dialog open={open} fullWidth onClose={onClose}>\r\n      {\r\n        sortOrder === 'asc' ? (\r\n          <Button\r\n            color=\"primary\"\r\n            endIcon={<ArrowUpwardIcon/>}\r\n            onClick={() => setSortOrder('desc')}\r\n          >\r\n            Highest First\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            color=\"primary\"\r\n            endIcon={<ArrowDownwardIcon/>}\r\n            onClick={() => setSortOrder('asc')}\r\n          >\r\n            Lowest First\r\n          </Button>\r\n        )\r\n      }\r\n      <Divider/>\r\n      <List>\r\n        {sortedPlayers.map((player, index) => (\r\n          <ListItem key={index}>\r\n            <ListItemAvatar className={player.position <= 3 ? ('place-' + player.position) : 'default-place'}>\r\n              <Avatar> {player.score} </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={player.name}/>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider/>\r\n      <Button color=\"primary\" onClick={onClose}> Close </Button>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport './Player.scss';\r\nimport {PlayerModel, Points} from \"../../models/player.model\";\r\n\r\ninterface PlayerProps {\r\n  player: PlayerModel;\r\n  onPointsChange: (points: Points[]) => void;\r\n}\r\n\r\nfunction Player({player, onPointsChange}: PlayerProps) {\r\n\r\n  if (player.points.length === 0 || player.points[player.points.length-1] !== null) {\r\n    onPointsChange(player.points.concat(null));\r\n  }\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>, index: number) => {\r\n    const newValue = e.target.value ? +e.target.value : null;\r\n    const newPoints = player.points.map((p, i) => i === index ? newValue : p);\r\n    if (index === player.points.length-1) {\r\n      onPointsChange(newPoints.concat(null));\r\n    } else {\r\n      onPointsChange(newPoints);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"player-container\">\r\n      { player.points.map((p, i) => (\r\n        <div className=\"player-points player-input-cell\" key={i}>\r\n          <input className={p !== null ? \"points-input\" : \"points-input empty-input\"}\r\n                 type=\"number\"\r\n                 value={p !== null ? p : \"\"}\r\n                 onChange={(e) => handleChange(e, i)}\r\n                 onClick={(e) => {e.currentTarget.select()}}\r\n          />\r\n        </div>\r\n      )) }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Player;\r\n","import './PointsTable.scss';\r\nimport Player from \"./player/Player\";\r\nimport {PlayerModel, Points} from \"../models/player.model\";\r\nimport React from \"react\";\r\n\r\ninterface PointsTableProps {\r\n  players: PlayerModel[];\r\n  onPlayerNameChange: (name: string, id: string) => void;\r\n  onPointsChange: (points: Points[], id: string) => void;\r\n}\r\n\r\nexport function PointsTable({players, onPlayerNameChange, onPointsChange}: PointsTableProps) {\r\n  return (\r\n    <div className=\"player-table-container\">\r\n      <div className=\"player-names\">\r\n        {players.map((player, index) => (\r\n          <input className=\"player-name\" type=\"text\"\r\n                 key={index}\r\n                 value={player.name}\r\n                 onChange={(e) => onPlayerNameChange(e.target.value, player.id)}\r\n                 onClick={(e) => {e.currentTarget.select()}}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"player-table\">\r\n        {players.map((player, i) => (\r\n          <Player key={i}\r\n                  player={player}\r\n                  onPointsChange={(points) => onPointsChange(points, player.id)}/>\r\n        ))}\r\n      </div>\r\n      <div className=\"player-scores\">\r\n        {players.map((player, i) =>\r\n          <div className=\"player-score player-header-cell\" key={i}>\r\n            {player.points.reduce((a: number, b: Points) => a + (b || 0), 0)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import './TopBar.scss';\r\nimport {IconButton, ListItemIcon, ListItemText, Menu, MenuItem, Typography} from \"@material-ui/core\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport GradeIcon from \"@material-ui/icons/Grade\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport {ConfirmationDialog} from \"../components/confirmation-dialog/ConfirmationDialog\";\r\nimport React from \"react\";\r\n\r\ninterface TopBarProps {\r\n  gameName: string;\r\n  onAddPlayer: () => void;\r\n  onClearPoints: () => void;\r\n  onOpenDelete: () => void;\r\n  onOpenLeaderBoard: () => void;\r\n  onNewGame: () => void;\r\n  onNameChange: (name: string) => void;\r\n  onOpenHistory: () => void;\r\n}\r\n\r\nexport function TopBar({\r\n                         gameName,\r\n                         onAddPlayer,\r\n                         onClearPoints,\r\n                         onOpenDelete,\r\n                         onOpenLeaderBoard,\r\n                         onNewGame,\r\n                         onNameChange,\r\n                         onOpenHistory\r\n}: TopBarProps) {\r\n  const [confirmationOpen, setConfirmationOpen] = React.useState(false);\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClearPoints = () => {\r\n    setConfirmationOpen(true);\r\n  }\r\n\r\n  const handleClearConfirmation = () => {\r\n    setConfirmationOpen(false);\r\n    onClearPoints();\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"top-bar\">\r\n        <div className=\"empty-container\"/>\r\n        <input type=\"text\" className=\"game-name-input\"\r\n               value={gameName}\r\n               onChange={e => onNameChange(e.target.value)}\r\n               onClick={e => {e.currentTarget.select()}}\r\n        />\r\n        <IconButton onClick={handleClick}>\r\n          <MoreVertIcon className=\"top-bar-icon\"/>\r\n        </IconButton>\r\n      </div>\r\n      <Menu anchorEl={anchorEl}\r\n               open={!!anchorEl}\r\n               onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={handleClearPoints}>\r\n          <ListItemIcon> <RotateLeftIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Clear Points </Typography>}/>\r\n        </MenuItem>\r\n        <MenuItem onClick={onOpenDelete}>\r\n          <ListItemIcon> <DeleteIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Remove Players </Typography>}/>\r\n        </MenuItem>\r\n        <MenuItem onClick={onAddPlayer}>\r\n          <ListItemIcon> <AddIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Add Player </Typography>}/>\r\n        </MenuItem>\r\n        <MenuItem onClick={onOpenLeaderBoard}>\r\n          <ListItemIcon> <GradeIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Leaderboard </Typography>}/>\r\n        </MenuItem>\r\n        <MenuItem onClick={onNewGame}>\r\n          <ListItemIcon> <AddCircleIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> New Game </Typography>} />\r\n        </MenuItem>\r\n        <MenuItem onClick={onOpenHistory}>\r\n          <ListItemIcon> <HistoryIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> History </Typography>} />\r\n        </MenuItem>\r\n      </Menu>\r\n      <ConfirmationDialog message=\"Are you sure you want to clear all points?\"\r\n                          open={confirmationOpen}\r\n                          onConfirm={handleClearConfirmation}\r\n                          onDecline={() => setConfirmationOpen(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import './NewGameDialog.scss';\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  Divider,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  ListItemSecondaryAction,\r\n  TextField\r\n} from \"@material-ui/core\";\r\nimport {PlayerModel} from \"../../models/player.model\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\ninterface NewGameDialogProps {\r\n  open: boolean;\r\n  players: PlayerModel[];\r\n  onClose: () => void;\r\n  onSubmit: (players: PlayerModel[]) => void;\r\n}\r\n\r\nexport function NewGameDialog({open, players, onClose, onSubmit}: NewGameDialogProps) {\r\n  const [newPlayers, setNewPlayers] = useState<PlayerModel[]>(players.map(player => ({...player, points: []})));\r\n\r\n  useEffect(() => setNewPlayers(players.map(player => ({...player, points: [null]}))), [players, open]);\r\n\r\n  const handleDelete = (index: number) => {\r\n    setNewPlayers(newPlayers.filter((_, i) => i !== index));\r\n  }\r\n\r\n  const handleNameChange = (name: string, index: number) => {\r\n    setNewPlayers(newPlayers.map((player, i) => index === i ? {...player, name} : player));\r\n  }\r\n\r\n  const addPlayer = () => {\r\n    setNewPlayers(newPlayers.concat({id: uuidv4(), name: `Player ${newPlayers.length + 1}`, points: []}));\r\n  }\r\n\r\n  return (\r\n    <Dialog fullWidth\r\n            open={open}\r\n            onClose={onClose}>\r\n      <List>\r\n        {newPlayers.map((player, index) => (\r\n          <ListItem key={index}>\r\n            <TextField label=\"Name\" variant=\"outlined\"\r\n                       value={player.name}\r\n                       onChange={(e) => handleNameChange(e.target.value, index)}/>\r\n            <ListItemSecondaryAction>\r\n              <IconButton onClick={() => handleDelete(index)}>\r\n                <DeleteIcon color=\"primary\"/>\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        ))}\r\n        <ListItem button style={{justifyContent: \"center\"}} onClick={addPlayer}>\r\n          <AddIcon color=\"primary\"/>\r\n        </ListItem>\r\n      </List>\r\n      <Divider/>\r\n      <Button color=\"primary\" onClick={() => onSubmit(newPlayers)}> New Game </Button>\r\n    </Dialog>\r\n  );\r\n}\r\n","import {GameModel} from \"../models/game.model\";\r\n\r\n\r\nexport const openGamesDB = (): Promise<IDBDatabase> => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(\"games\");\r\n\r\n    request.onupgradeneeded = () => {\r\n      request.result.createObjectStore(\"games\", {keyPath: \"id\"});\r\n    };\r\n\r\n    request.onsuccess = () => resolve(request.result);\r\n    request.onerror = () => reject(request.error);\r\n  });\r\n}\r\n\r\nexport const getAllGames = (db: IDBDatabase): Promise<GameModel[]> => {\r\n  return new Promise((resolve, reject) => {\r\n    const tx = db.transaction(\"games\", \"readonly\");\r\n    const store = tx.objectStore(\"games\");\r\n    const request = store.getAll();\r\n\r\n    request.onsuccess = () => {\r\n      const games = (request.result as GameModel[]).map(game => ({...game, timestamp: new Date(game.timestamp)}));\r\n      games\r\n        .sort((a: GameModel, b: GameModel) =>  b.timestamp.getTime() - a.timestamp.getTime());\r\n      resolve(games);\r\n    };\r\n    request.onerror = () => reject(request.error);\r\n  });\r\n}\r\n\r\nexport const saveGame = (game: GameModel) => {\r\n  const request = indexedDB.open(\"games\");\r\n  request.onsuccess = () => {\r\n    const tx = request.result.transaction(\"games\", \"readwrite\");\r\n    const store = tx.objectStore(\"games\");\r\n    store.put(game);\r\n  };\r\n}\r\n\r\nexport const deleteGame = (id: string) => {\r\n  const request = indexedDB.open(\"games\");\r\n  request.onsuccess = () => {\r\n    const tx = request.result.transaction(\"games\", \"readwrite\");\r\n    tx.objectStore(\"games\").delete(id);\r\n  };\r\n}\r\n\r\n","import './HistoryDialog.scss';\r\nimport {\r\n  Dialog,\r\n  TableHead,\r\n  Table,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Accordion,\r\n  AccordionSummary,\r\n  Typography,\r\n  AccordionDetails, AccordionActions, Button\r\n} from \"@material-ui/core\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {GameModel} from \"../../models/game.model\";\r\nimport {getAllGames, openGamesDB} from \"../../store/game.db\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {Points} from \"../../models/player.model\";\r\n\r\ninterface NewGameDialogProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onReturnPlaying: (game: GameModel) => void;\r\n  onDeleteGame: (id: string) => void;\r\n}\r\n\r\nexport function HistoryDialog({open, onClose, onReturnPlaying, onDeleteGame}: NewGameDialogProps) {\r\n  const [games, setGames] = useState<GameModel[] | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      (async () => {\r\n        const db = await openGamesDB();\r\n        const storedGames = await getAllGames(db);\r\n        setGames(storedGames);\r\n      })()\r\n    }\r\n    return () => {\r\n    };\r\n  }, [open]);\r\n\r\n  return (\r\n    <Dialog fullWidth\r\n            open={open}\r\n            onClose={onClose}>\r\n      {(!games || games.length <= 0) && (\r\n        <Typography>No past games found!</Typography>\r\n      )}\r\n      {games?.map((game, i) => (\r\n        <Accordion key={i}>\r\n          <AccordionSummary expandIcon={<ExpandMoreIcon color=\"primary\"/>}>\r\n            <div className=\"summary-container\">\r\n              <Typography>{game.name}</Typography>\r\n              <Typography className=\"summary-subtitle\" variant=\"caption\">\r\n                {game.timestamp.toLocaleDateString()} - {game.timestamp.toLocaleTimeString()}\r\n              </Typography>\r\n            </div>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <Table size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  {game.players.map((player, pi) => (\r\n                    <TableCell key={pi}>{player.name}</TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                <TableRow>\r\n                  {game.players.map((player, pi) => (\r\n                    <TableCell key={pi} component=\"th\" scope=\"row\">\r\n                      {player.points.reduce((a: number, b: Points) => a + (b || 0), 0)}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n          </AccordionDetails>\r\n          <AccordionActions>\r\n            <Button color=\"primary\" onClick={() => onDeleteGame(game.id)}> Delete </Button>\r\n            <Button color=\"primary\" variant=\"contained\" onClick={() => onReturnPlaying(game)}> Return Playing </Button>\r\n          </AccordionActions>\r\n        </Accordion>\r\n      ))}\r\n    </Dialog>\r\n  );\r\n}\r\n","import React, {useState} from 'react';\nimport './App.scss';\nimport {PlayerModel, Points} from \"./models/player.model\";\nimport {useGameState} from \"./store/game.store\";\nimport {DeletePlayersDialog} from \"./components/delete-players-dialog/DeletePlayersDialog\";\nimport {useSnackbar} from \"notistack\";\nimport {LeaderboardDialog} from \"./components/leaderbord-dialog/LeaderboardDialog\";\nimport { v4 as uuidv4 } from 'uuid';\nimport {PointsTable} from \"./points-table/PointsTable\";\nimport {TopBar} from \"./top-bar/TopBar\";\nimport {NewGameDialog} from \"./components/new-game-dialog/NewGameDialog\";\nimport {HistoryDialog} from \"./components/history-dialog/HistoryDialog\";\nimport {deleteGame, saveGame} from \"./store/game.db\";\nimport {GameModel} from \"./models/game.model\";\n\nfunction App() {\n  const [game, setGame] = useGameState();\n  const [deleteOpen, setDeleteOpen] = useState(false);\n  const [leaderboardOpen, setLeaderboardOpen] = useState(false);\n  const [newGameOpen, setNewGameOpen] = useState(false);\n  const [historyOpen, setHistoryOpen] = useState(false);\n  const {enqueueSnackbar} = useSnackbar();\n\n  if (game.players.length === 0) {\n    setGame({\n      ...game,\n      players: [{id: uuidv4(), name: \"Liam\", points: [null]}]\n    });\n  }\n\n  const setGameName = (name: string) => {\n    setGame({...game, name})\n  }\n\n  const setNewGame = (newPlayers: PlayerModel[]) => {\n    saveGame(game);\n    const timestamp = new Date();\n    const name = `Game ${timestamp.toLocaleDateString()}`;\n    setGame({id: uuidv4(), name, timestamp, players: newPlayers});\n    setNewGameOpen(false);\n  }\n\n  const setOldGame = (oldGame: GameModel) => {\n    deleteGame(oldGame.id);\n    setGame(oldGame);\n    setHistoryOpen(false);\n  }\n\n  const deleteOldGame = (id: string) => {\n    deleteGame(id);\n    setHistoryOpen(false);\n  }\n\n  const handlePointsChange = (points: Points[], id: string) => {\n    setGame({\n      ...game,\n      players: game.players.map(player => player.id === id ? {...player, points} : player)\n    });\n  }\n\n  const addPlayer = () => {\n    setGame({\n      ...game,\n      players: game.players.concat({id: uuidv4(), name: `Player ${game.players.length + 1}`, points: [null]})\n    });\n    enqueueSnackbar(`${game.players.length + 1} players`);\n  }\n\n  const clearPoints = () => {\n    setGame({\n      ...game,\n      players: game.players.map(player => ({...player, points: []}))\n    });\n  }\n\n  const setPlayerName = (name: string, id: string) => {\n    setGame({\n      ...game,\n      players: game.players.map(player => player.id === id ? {...player, name} : player)\n    });\n  }\n\n  const deletePlayer = (id: string) => {\n    setGame({\n      ...game,\n      players: game.players.filter(player => player.id !== id)\n    });\n  }\n\n  return (\n    <div className=\"app\">\n      <TopBar gameName={game.name}\n              onNameChange={setGameName}\n              onAddPlayer={addPlayer}\n              onClearPoints={clearPoints}\n              onOpenDelete={() => setDeleteOpen(true)}\n              onOpenLeaderBoard={() => setLeaderboardOpen(true)}\n              onNewGame={() => setNewGameOpen(true)}\n              onOpenHistory={() => setHistoryOpen(true)}\n      />\n      <PointsTable onPlayerNameChange={setPlayerName}\n                   onPointsChange={handlePointsChange}\n                   players={game.players}\n      />\n      <DeletePlayersDialog players={game.players}\n                           open={deleteOpen}\n                           onDelete={deletePlayer}\n                           onClose={() => setDeleteOpen(false)}\n      />\n      <LeaderboardDialog players={game.players}\n                         open={leaderboardOpen}\n                         onClose={() => setLeaderboardOpen(false)}\n      />\n      <NewGameDialog open={newGameOpen}\n                     players={game.players}\n                     onClose={() => setNewGameOpen(false)}\n                     onSubmit={setNewGame}\n      />\n      <HistoryDialog open={historyOpen}\n                     onClose={() => setHistoryOpen(false)}\n                     onReturnPlaying={(game) => setOldGame(game)}\n                     onDeleteGame={(id) => {deleteOldGame(id)}}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createTheme} from \"@material-ui/core\";\r\n\r\nexport const theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#3F51B5',\r\n      contrastText: '#ffffff',\r\n    },\r\n    secondary: {\r\n      main: '#FFA000',\r\n      contrastText: '#ffffff'\r\n    },\r\n  },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport {MuiThemeProvider} from '@material-ui/core';\nimport {theme} from \"./theme\";\nimport {SnackbarProvider} from \"notistack\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiThemeProvider theme={theme}>\n      <SnackbarProvider maxSnack={1}\n                        dense={true}\n                        anchorOrigin={{\n                          vertical: 'bottom',\n                          horizontal: 'center',\n                        }}\n      >\n        <App/>\n      </SnackbarProvider>\n    </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}
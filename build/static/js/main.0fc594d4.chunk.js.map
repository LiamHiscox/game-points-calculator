{"version":3,"sources":["store/game.store.ts","components/confirmation-dialog/ConfirmationDialog.tsx","components/delete-players-dialog/DeletePlayersDialog.tsx","components/leaderbord-dialog/LeaderboardDialog.tsx","points-table/player/Player.tsx","points-table/PointsTable.tsx","top-bar/TopBar.tsx","components/new-game-dialog/NewGameDialog.tsx","components/history-dialog/HistoryDialog.tsx","store/games.store.ts","App.tsx","serviceWorkerRegistration.ts","theme.ts","index.tsx"],"names":["gameKey","getStoredGame","storedGame","localStorage","getItem","parsed","JSON","parse","timestamp","Date","id","uuidv4","name","players","ConfirmationDialog","message","open","onConfirm","onDecline","Dialog","fullWidth","onClose","DialogContent","DialogActions","Button","color","onClick","DeletePlayersDialog","onDelete","useState","confirmationOpen","setConfirmationOpen","deleteId","setDeleteId","deleteName","setDeleteName","List","map","player","i","ListItem","ListItemText","primary","ListItemSecondaryAction","IconButton","Divider","LeaderboardDialog","sortOrder","setSortOrder","sortedPlayers","position","score","points","reduce","a","b","sort","acc","cur","concat","Array","endIcon","index","ListItemAvatar","className","Avatar","Player","onPointsChange","readonly","length","p","type","value","onChange","e","newValue","target","newPoints","handleChange","currentTarget","select","disabled","PointsTable","onPlayerNameChange","TopBar","gameName","onAddPlayer","onClearPoints","onOpenDelete","onOpenLeaderBoard","onNewGame","onNameChange","onOpenHistory","React","anchorEl","setAnchorEl","event","Menu","MenuItem","ListItemIcon","Typography","NewGameDialog","game","onSubmit","newGame","setNewGame","useEffect","handleGameNameChange","newName","FormControl","variant","InputLabel","OutlinedInput","error","endAdornment","InputAdornment","labelWidth","style","fontWeight","Fade","in","TextField","label","flex","handleNameChange","filter","_","handleDelete","justifyContent","emptyPlayerName","find","emptyGameName","canSubmit","HistoryDialog","onReturnPlaying","onDeleteGame","games","setGame","showGame","setShowGame","showConfirm","setShowConfirm","showConfirmReplay","setShowConfirmReplay","expanded","setExpanded","Accordion","AccordionSummary","expandIcon","toLocaleDateString","toLocaleTimeString","AccordionDetails","overflow","Table","size","TableHead","TableRow","pi","TableCell","TableBody","component","scope","AccordionActions","handleDeleteClick","handleReplayClick","handleDetailClick","GamesDatabase","version","stores","table","Dexie","App","setStateGame","setItem","stringify","useGameState","setStateGames","db","enqueueSnackbar","useSnackbar","transaction","orderBy","reverse","toArray","storedGames","loadGames","deleteGame","where","equals","delete","addGame","add","useGamesState","deleteOpen","setDeleteOpen","leaderboardOpen","setLeaderboardOpen","newGameOpen","setNewGameOpen","historyOpen","setHistoryOpen","canSaveGame","oldGame","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","theme","createTheme","palette","main","contrastText","secondary","ReactDOM","render","StrictMode","maxSnack","dense","anchorOrigin","vertical","horizontal","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0fc594d4.chunk.js","sourcesContent":["import {useState} from \"react\";\r\nimport {GameModel} from \"../models/game.model\";\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nconst gameKey = 'game';\r\n\r\nconst getStoredGame = (): GameModel => {\r\n  const storedGame = localStorage.getItem(gameKey);\r\n  if (storedGame) {\r\n    const parsed = JSON.parse(storedGame) as GameModel;\r\n    return {...parsed, timestamp: new Date(parsed.timestamp)}\r\n  } else {\r\n    return {\r\n      id: uuidv4(),\r\n      name: 'New Game',\r\n      timestamp: new Date(),\r\n      players: []\r\n    };\r\n  }\r\n}\r\n\r\nexport const useGameState = (): [GameModel, (game: GameModel) => void] => {\r\n  const [game, setStateGame] = useState<GameModel>(getStoredGame);\r\n\r\n  const setGame = (newGame: GameModel) => {\r\n    setStateGame(newGame);\r\n    localStorage.setItem(gameKey, JSON.stringify(newGame));\r\n  }\r\n\r\n  return [game, setGame];\r\n}\r\n","import \"./ConfirmationDialog.scss\";\r\nimport React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {Button, DialogActions, DialogContent} from \"@material-ui/core\";\r\n\r\ninterface LeaderboardDialogProps {\r\n  message: string;\r\n  open: boolean;\r\n  onConfirm: () => void;\r\n  onDecline: () => void;\r\n}\r\n\r\nexport function ConfirmationDialog({message, open, onConfirm, onDecline}: LeaderboardDialogProps) {\r\n  return (\r\n    <Dialog open={open} fullWidth onClose={onDecline}>\r\n      <DialogContent>\r\n        {message}\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button color=\"primary\" onClick={onDecline}> No </Button>\r\n        <Button color=\"primary\" onClick={onConfirm}> Yes </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","import Dialog from '@material-ui/core/Dialog';\r\nimport {PlayerModel} from \"../../models/player.model\";\r\nimport {Button, Divider, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {useState} from \"react\";\r\nimport {ConfirmationDialog} from \"../confirmation-dialog/ConfirmationDialog\";\r\n\r\n\r\ninterface DeletePlayersDialogProps {\r\n  players: PlayerModel[];\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onDelete: (id: string) => void;\r\n}\r\n\r\nexport function DeletePlayersDialog({players, open, onClose, onDelete}: DeletePlayersDialogProps) {\r\n  const [confirmationOpen, setConfirmationOpen] = useState(false);\r\n  const [deleteId, setDeleteId] = useState('');\r\n  const [deleteName, setDeleteName] = useState('');\r\n\r\n  const handleDelete = (id: string, name: string) => {\r\n    setDeleteId(id);\r\n    setDeleteName(name);\r\n    setConfirmationOpen(true);\r\n  }\r\n\r\n  const handleConfirm = () => {\r\n    setConfirmationOpen(false);\r\n    onDelete(deleteId);\r\n  }\r\n\r\n  return (\r\n    <Dialog open={open}\r\n            fullWidth\r\n            onClose={onClose}>\r\n      <List>\r\n        {players.map((player, i) => (\r\n          <ListItem key={i}>\r\n            <ListItemText primary={player.name}/>\r\n            <ListItemSecondaryAction>\r\n              <IconButton onClick={() => handleDelete(player.id, player.name)}>\r\n                <DeleteIcon color=\"primary\"/>\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider/>\r\n      <Button color=\"primary\" onClick={onClose}> Close </Button>\r\n      <ConfirmationDialog message={`Are you sure you want to delete ${deleteName}?`}\r\n                          open={confirmationOpen}\r\n                          onConfirm={handleConfirm}\r\n                          onDecline={() => setConfirmationOpen(false)}\r\n      />\r\n    </Dialog>\r\n  );\r\n}\r\n","import \"./LeaderboardDialog.scss\";\r\nimport {PlayerModel, Points} from \"../../models/player.model\";\r\nimport React, {useState} from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\n\r\ninterface LeaderboardDialogProps {\r\n  players: PlayerModel[];\r\n  open: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\ninterface PlayerScores {\r\n  position: number;\r\n  name: string;\r\n  score: number;\r\n}\r\n\r\nexport function LeaderboardDialog({players, open, onClose}: LeaderboardDialogProps) {\r\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\r\n\r\n  let sortedPlayers = players\r\n    .map<PlayerScores>(player => ({\r\n      position: 0,\r\n      name: player.name,\r\n      score: player.points.reduce((a: number, b: Points) => a + (b || 0), 0)\r\n    }))\r\n    .sort((a, b) => sortOrder === 'asc' ? (a.score - b.score) : (b.score - a.score))\r\n    .reduce((acc, cur, i) => {\r\n      if (i > 0 && acc[i-1].score === cur.score) {\r\n        return acc.concat({...cur, position: acc[i-1].position});\r\n      } else {\r\n        return acc.concat({...cur, position: i+1});\r\n      }\r\n    }, Array<PlayerScores>());\r\n\r\n  return (\r\n    <Dialog open={open} fullWidth onClose={onClose}>\r\n      {\r\n        sortOrder === 'asc' ? (\r\n          <Button\r\n            color=\"primary\"\r\n            endIcon={<ArrowUpwardIcon/>}\r\n            onClick={() => setSortOrder('desc')}\r\n          >\r\n            Highest First\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            color=\"primary\"\r\n            endIcon={<ArrowDownwardIcon/>}\r\n            onClick={() => setSortOrder('asc')}\r\n          >\r\n            Lowest First\r\n          </Button>\r\n        )\r\n      }\r\n      <Divider/>\r\n      <List>\r\n        {sortedPlayers.map((player, index) => (\r\n          <ListItem key={index}>\r\n            <ListItemAvatar className={player.position <= 3 ? ('place-' + player.position) : 'default-place'}>\r\n              <Avatar> {player.score} </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={player.name}/>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider/>\r\n      <Button color=\"primary\" onClick={onClose}> Close </Button>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport './Player.scss';\r\nimport {PlayerModel, Points} from \"../../models/player.model\";\r\n\r\ninterface PlayerProps {\r\n  player: PlayerModel;\r\n  onPointsChange: (points: Points[]) => void;\r\n  readonly: boolean;\r\n}\r\n\r\nfunction Player({player, onPointsChange, readonly}: PlayerProps) {\r\n\r\n  if (player.points.length === 0 || player.points[player.points.length-1] !== null) {\r\n    onPointsChange(player.points.concat(null));\r\n  }\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>, index: number) => {\r\n    const newValue = e.target.value ? +e.target.value : null;\r\n    const newPoints = player.points.map((p, i) => i === index ? newValue : p);\r\n    if (index === player.points.length-1) {\r\n      onPointsChange(newPoints.concat(null));\r\n    } else {\r\n      onPointsChange(newPoints);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"player-container\">\r\n      { player.points.map((p, i) => (\r\n        <div className=\"player-points player-input-cell\" key={i}>\r\n          {(!readonly || p !== null) && (\r\n            <input className={p !== null ? \"points-input\" : \"points-input empty-input\"}\r\n                   type=\"number\"\r\n                   value={p !== null ? p : \"\"}\r\n                   onChange={(e) => handleChange(e, i)}\r\n                   onClick={(e) => {e.currentTarget.select()}}\r\n                   disabled={readonly}\r\n            />\r\n          )}\r\n        </div>\r\n      )) }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Player;\r\n","import './PointsTable.scss';\r\nimport Player from \"./player/Player\";\r\nimport {PlayerModel, Points} from \"../models/player.model\";\r\nimport React from \"react\";\r\n\r\ninterface PointsTableProps {\r\n  players: PlayerModel[];\r\n  onPlayerNameChange: (name: string, id: string) => void;\r\n  onPointsChange: (points: Points[], id: string) => void;\r\n  readonly: boolean;\r\n}\r\n\r\nexport function PointsTable({players, onPlayerNameChange, onPointsChange, readonly}: PointsTableProps) {\r\n  return (\r\n    <div className=\"player-table-container\">\r\n      <div className=\"player-names\">\r\n        {players.map((player, index) => (\r\n          <input className=\"player-name\" type=\"text\"\r\n                 disabled={readonly}\r\n                 key={index}\r\n                 value={player.name}\r\n                 onChange={(e) => onPlayerNameChange(e.target.value, player.id)}\r\n                 onClick={(e) => {e.currentTarget.select()}}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"player-table\">\r\n        {players.map((player, i) => (\r\n          <Player key={i}\r\n                  player={player}\r\n                  onPointsChange={(points) => onPointsChange(points, player.id)}\r\n                  readonly={readonly}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"player-scores\">\r\n        {players.map((player, i) =>\r\n          <div className=\"player-score player-header-cell\" key={i}>\r\n            {player.points.reduce((a: number, b: Points) => a + (b || 0), 0)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import './TopBar.scss';\r\nimport {IconButton, ListItemIcon, ListItemText, Menu, MenuItem, Typography} from \"@material-ui/core\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport GradeIcon from \"@material-ui/icons/Grade\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport {ConfirmationDialog} from \"../components/confirmation-dialog/ConfirmationDialog\";\r\nimport React from \"react\";\r\n\r\ninterface TopBarProps {\r\n  gameName: string;\r\n  onAddPlayer: () => void;\r\n  onClearPoints: () => void;\r\n  onOpenDelete: () => void;\r\n  onOpenLeaderBoard: () => void;\r\n  onNewGame: () => void;\r\n  onNameChange: (name: string) => void;\r\n  onOpenHistory: () => void;\r\n}\r\n\r\nexport function TopBar({\r\n                         gameName,\r\n                         onAddPlayer,\r\n                         onClearPoints,\r\n                         onOpenDelete,\r\n                         onOpenLeaderBoard,\r\n                         onNewGame,\r\n                         onNameChange,\r\n                         onOpenHistory\r\n}: TopBarProps) {\r\n  const [confirmationOpen, setConfirmationOpen] = React.useState(false);\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClearPoints = () => {\r\n    setConfirmationOpen(true);\r\n  }\r\n\r\n  const handleClearConfirmation = () => {\r\n    setConfirmationOpen(false);\r\n    onClearPoints();\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"top-bar\">\r\n        <div className=\"empty-container\"/>\r\n        <input type=\"text\" className=\"game-name-input\"\r\n               value={gameName}\r\n               onChange={e => onNameChange(e.target.value)}\r\n               onClick={e => {e.currentTarget.select()}}\r\n        />\r\n        <IconButton onClick={handleClick}>\r\n          <MoreVertIcon className=\"top-bar-icon\"/>\r\n        </IconButton>\r\n      </div>\r\n      <Menu anchorEl={anchorEl}\r\n               open={!!anchorEl}\r\n               onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={handleClearPoints}>\r\n          <ListItemIcon> <RotateLeftIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Clear Points </Typography>}/>\r\n        </MenuItem>\r\n        <MenuItem onClick={onOpenDelete}>\r\n          <ListItemIcon> <DeleteIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Remove Players </Typography>}/>\r\n        </MenuItem>\r\n        <MenuItem onClick={onAddPlayer}>\r\n          <ListItemIcon> <AddIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Add Player </Typography>}/>\r\n        </MenuItem>\r\n        <MenuItem onClick={onOpenLeaderBoard}>\r\n          <ListItemIcon> <GradeIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> Leaderboard </Typography>}/>\r\n        </MenuItem>\r\n        <MenuItem onClick={onNewGame}>\r\n          <ListItemIcon> <AddCircleIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> New Game </Typography>} />\r\n        </MenuItem>\r\n        <MenuItem onClick={onOpenHistory}>\r\n          <ListItemIcon> <HistoryIcon color=\"secondary\"/> </ListItemIcon>\r\n          <ListItemText primary={<Typography color=\"primary\"> History </Typography>} />\r\n        </MenuItem>\r\n      </Menu>\r\n      <ConfirmationDialog message=\"Are you sure you want to clear all points?\"\r\n                          open={confirmationOpen}\r\n                          onConfirm={handleClearConfirmation}\r\n                          onDecline={() => setConfirmationOpen(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import './NewGameDialog.scss';\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  Divider,\r\n  Fade,\r\n  FormControl,\r\n  IconButton,\r\n  InputAdornment,\r\n  InputLabel,\r\n  List,\r\n  ListItem,\r\n  OutlinedInput,\r\n  TextField,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport {useEffect, useState} from \"react\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport {GameModel} from \"../../models/game.model\";\r\n\r\ninterface NewGameDialogProps {\r\n  open: boolean;\r\n  game: GameModel;\r\n  onClose: () => void;\r\n  onSubmit: (game: GameModel) => void;\r\n}\r\n\r\nexport function NewGameDialog({open, game, onClose, onSubmit}: NewGameDialogProps) {\r\n  const [newGame, setNewGame] = useState<GameModel>({id: '', timestamp: new Date(), name: '', players: []});\r\n\r\n  useEffect(() => {\r\n      open && setNewGame({\r\n        id: uuidv4(),\r\n        timestamp: new Date(),\r\n        name: game.name,\r\n        players: game.players.map(player => ({...player, points: [null]}))\r\n      });\r\n  }, [game, open]);\r\n\r\n  const handleDelete = (index: number) => {\r\n    setNewGame({\r\n      ...newGame,\r\n      players: newGame.players.filter((_, i) => i !== index)\r\n    });\r\n  }\r\n\r\n  const handleGameNameChange = (newName: string) => {\r\n    setNewGame({\r\n      ...newGame,\r\n      name: newName\r\n    });\r\n  }\r\n\r\n  const handleNameChange = (name: string, index: number) => {\r\n    setNewGame({\r\n      ...newGame,\r\n      players: newGame.players.map((player, i) => index === i ? {...player, name} : player)\r\n    });\r\n  }\r\n\r\n  const addPlayer = () => {\r\n    setNewGame({\r\n      ...newGame,\r\n      players: newGame.players.concat({id: uuidv4(), name: '', points: [null]})\r\n    });\r\n  }\r\n\r\n  const canSubmit = (): boolean => {\r\n    const emptyPlayerName = !!newGame.players.find(player => !player.name);\r\n    const emptyGameName = !newGame.name;\r\n    return emptyPlayerName || emptyGameName;\r\n  }\r\n\r\n  return (\r\n    <Dialog fullWidth\r\n            open={open}\r\n            onClose={onClose}>\r\n      <List>\r\n        <ListItem>\r\n          <FormControl variant=\"outlined\" className=\"player-name-form-control\">\r\n            <InputLabel> Game Name </InputLabel>\r\n            <OutlinedInput\r\n              type=\"text\"\r\n              value={newGame.name}\r\n              error={!newGame.name}\r\n              onChange={e => handleGameNameChange(e.target.value)}\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton onClick={() => handleGameNameChange('')}>\r\n                    <CloseIcon color=\"primary\"/>\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n              labelWidth={93}\r\n            />\r\n          </FormControl>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Typography style={{fontWeight: \"bold\"}}> Players </Typography>\r\n        </ListItem>\r\n        {newGame.players.map((player, index) => (\r\n          <Fade key={index} in>\r\n            <ListItem>\r\n              <TextField label=\"Player Name\" variant=\"outlined\"\r\n                         value={player.name}\r\n                         style={{flex: \"1\"}}\r\n                         onChange={(e) => handleNameChange(e.target.value, index)}\r\n                         error={!player.name}\r\n              />\r\n              <IconButton onClick={() => handleDelete(index)}>\r\n                <DeleteIcon color=\"primary\"/>\r\n              </IconButton>\r\n            </ListItem>\r\n          </Fade>\r\n        ))}\r\n        <ListItem style={{justifyContent: \"center\"}}>\r\n          <IconButton onClick={addPlayer}>\r\n            <AddIcon color=\"primary\"/>\r\n          </IconButton>\r\n        </ListItem>\r\n      </List>\r\n      <Divider/>\r\n      <Button color=\"primary\"\r\n              onClick={() => onSubmit(newGame)}\r\n              disabled={canSubmit()}\r\n      >\r\n        New Game\r\n      </Button>\r\n    </Dialog>\r\n  );\r\n}\r\n","import './HistoryDialog.scss';\r\nimport {\r\n  Dialog,\r\n  TableHead,\r\n  Table,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Accordion,\r\n  AccordionSummary,\r\n  Typography,\r\n  AccordionDetails,\r\n  AccordionActions,\r\n  IconButton\r\n} from \"@material-ui/core\";\r\nimport {useState} from \"react\";\r\nimport {GameModel} from \"../../models/game.model\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {Points} from \"../../models/player.model\";\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport {PointsTable} from \"../../points-table/PointsTable\";\r\nimport {ConfirmationDialog} from \"../confirmation-dialog/ConfirmationDialog\";\r\n\r\ninterface NewGameDialogProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onReturnPlaying: (game: GameModel) => void;\r\n  onDeleteGame: (id: string) => void;\r\n  games: GameModel[];\r\n}\r\n\r\nexport function HistoryDialog({open, onClose, onReturnPlaying, onDeleteGame, games}: NewGameDialogProps) {\r\n  const [game, setGame] = useState<GameModel | null>(null);\r\n  const [showGame, setShowGame] = useState(false);\r\n  const [showConfirm, setShowConfirm] = useState(false);\r\n  const [showConfirmReplay, setShowConfirmReplay] = useState(false);\r\n  const [expanded, setExpanded] = useState<number | null>(null);\r\n\r\n  const handleDetailClick = (game: GameModel) => {\r\n    setGame(game);\r\n    setShowGame(true);\r\n  }\r\n\r\n  const handleReplayClick = (game: GameModel) => {\r\n    setGame(game);\r\n    setShowConfirmReplay(true);\r\n  }\r\n\r\n  const handleReplay = () => {\r\n    game && onReturnPlaying(game);\r\n    setShowConfirmReplay(false);\r\n  }\r\n\r\n  const handleDeleteClick = (game: GameModel) => {\r\n    setGame(game);\r\n    setShowConfirm(true);\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    setShowConfirm(false);\r\n    game && onDeleteGame(game.id);\r\n  }\r\n\r\n  const handleExpandedChange = (index: number) => {\r\n    setExpanded(expanded === index ? null : index);\r\n  }\r\n\r\n  return (\r\n    <Dialog fullWidth\r\n            open={open}\r\n            onClose={onClose}>\r\n      {games.length <= 0 && (\r\n        <Typography>No past games found!</Typography>\r\n      )}\r\n      {games.map((game, i) => (\r\n        <Accordion key={i} expanded={expanded === i} onChange={() => handleExpandedChange(i)}>\r\n          <AccordionSummary expandIcon={<ExpandMoreIcon color=\"primary\"/>}>\r\n            <div className=\"summary-container\">\r\n              <Typography>{game.name}</Typography>\r\n              <Typography className=\"summary-subtitle\" variant=\"caption\">\r\n                {game.timestamp.toLocaleDateString()} - {game.timestamp.toLocaleTimeString()}\r\n              </Typography>\r\n            </div>\r\n          </AccordionSummary>\r\n          <AccordionDetails style={{overflow: \"auto\"}}>\r\n            <Table size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  {game.players.map((player, pi) => (\r\n                    <TableCell key={pi}>{player.name}</TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                <TableRow>\r\n                  {game.players.map((player, pi) => (\r\n                    <TableCell key={pi} component=\"th\" scope=\"row\">\r\n                      {player.points.reduce((a: number, b: Points) => a + (b || 0), 0)}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n          </AccordionDetails>\r\n          <AccordionActions>\r\n            <div className=\"history-actions\">\r\n              <IconButton onClick={() => handleDeleteClick(game)}>\r\n                <DeleteIcon color=\"primary\"/>\r\n              </IconButton>\r\n              <IconButton onClick={() => handleReplayClick(game)}>\r\n                <ReplayIcon color=\"primary\"/>\r\n              </IconButton>\r\n              <IconButton onClick={() => handleDetailClick(game)}>\r\n                <ZoomInIcon color=\"primary\"/>\r\n              </IconButton>\r\n            </div>\r\n          </AccordionActions>\r\n        </Accordion>\r\n      ))}\r\n      <Dialog open={showGame}\r\n              onClose={() => setShowGame(false)}>\r\n        <PointsTable players={game?.players || []}\r\n                     onPlayerNameChange={() => {}}\r\n                     onPointsChange={() => {}}\r\n                     readonly={true}\r\n        />\r\n      </Dialog>\r\n      <ConfirmationDialog message={`Are you sure you want to delete ${game?.name}?`}\r\n                          open={showConfirm}\r\n                          onConfirm={handleDelete}\r\n                          onDecline={() => setShowConfirm(false)}\r\n      />\r\n      <ConfirmationDialog message={`Are you sure you want to replay ${game?.name}?`}\r\n                          open={showConfirmReplay}\r\n                          onConfirm={handleReplay}\r\n                          onDecline={() => setShowConfirmReplay(false)}\r\n      />\r\n    </Dialog>\r\n  );\r\n}\r\n","import {GameModel} from \"../models/game.model\";\r\nimport {useEffect, useState} from \"react\";\r\nimport Dexie from \"dexie\";\r\nimport {useSnackbar} from \"notistack\";\r\n\r\nclass GamesDatabase extends Dexie {\r\n  public games: Dexie.Table<GameModel, string>;\r\n\r\n  public constructor() {\r\n    super(\"GamesDatabase\");\r\n    this.version(1).stores({\r\n      games: \"id,timestamp,name,players\"\r\n    });\r\n    this.games = this.table('games');\r\n  }\r\n}\r\n\r\nexport interface GameStateProps {\r\n  games: GameModel[],\r\n  deleteGame: (id: string) => void\r\n  addGame: (game: GameModel) => void,\r\n}\r\n\r\nexport const useGamesState = (): GameStateProps => {\r\n  const [games, setStateGames] = useState<GameModel[]>([]);\r\n  const [db] = useState(new GamesDatabase());\r\n  const {enqueueSnackbar} = useSnackbar();\r\n\r\n  useEffect(() => {\r\n    db.transaction('r', db.games, async () => {\r\n      const storedGames = await db.games.orderBy(\"timestamp\").reverse().toArray();\r\n      setStateGames(storedGames);\r\n    });\r\n  }, [db]);\r\n\r\n  const loadGames = async () => {\r\n    const storedGames = await db.games.orderBy(\"timestamp\").reverse().toArray();\r\n    setStateGames(storedGames);\r\n  }\r\n\r\n  const addGame = (newGame: GameModel) => {\r\n    db.transaction('rw', db.games, async () => {\r\n      await db.games.add(newGame);\r\n      await loadGames();\r\n    });\r\n  }\r\n\r\n  const deleteGame = async (id: string) => {\r\n    db.transaction('rw', db.games, async () => {\r\n      await db.games.where(\"id\").equals(id).delete();\r\n      await loadGames();\r\n      enqueueSnackbar(`Successfully deleted game`, {variant: \"success\"});\r\n    });\r\n  }\r\n\r\n  return {games, deleteGame, addGame};\r\n}\r\n","import React, {useState} from 'react';\nimport './App.scss';\nimport {Points} from \"./models/player.model\";\nimport {useGameState} from \"./store/game.store\";\nimport {DeletePlayersDialog} from \"./components/delete-players-dialog/DeletePlayersDialog\";\nimport {useSnackbar} from \"notistack\";\nimport {LeaderboardDialog} from \"./components/leaderbord-dialog/LeaderboardDialog\";\nimport { v4 as uuidv4 } from 'uuid';\nimport {PointsTable} from \"./points-table/PointsTable\";\nimport {TopBar} from \"./top-bar/TopBar\";\nimport {NewGameDialog} from \"./components/new-game-dialog/NewGameDialog\";\nimport {HistoryDialog} from \"./components/history-dialog/HistoryDialog\";\nimport {useGamesState} from \"./store/games.store\";\nimport {GameModel} from \"./models/game.model\";\n\nfunction App() {\n  const [game, setGame] = useGameState();\n  const {games, deleteGame, addGame} = useGamesState();\n  const [deleteOpen, setDeleteOpen] = useState(false);\n  const [leaderboardOpen, setLeaderboardOpen] = useState(false);\n  const [newGameOpen, setNewGameOpen] = useState(false);\n  const [historyOpen, setHistoryOpen] = useState(false);\n  const {enqueueSnackbar} = useSnackbar();\n\n  if (game.players.length === 0) {\n    setGame({\n      ...game,\n      players: [{id: uuidv4(), name: \"Liam\", points: [null]}]\n    });\n  }\n\n  const setGameName = (name: string) => {\n    setGame({...game, name})\n  }\n\n  const canSaveGame = (game: GameModel): boolean => {\n    return game\n      .players\n      .map(player => player.points.filter(points => points !== null)).filter(points => points.length > 0)\n      .length > 0;\n  }\n\n  const setNewGame = (newGame: GameModel) => {\n    if (canSaveGame(game)) {\n      addGame(game);\n    }\n    setGame({id: uuidv4(), name: newGame.name, timestamp: new Date(), players: newGame.players});\n    setNewGameOpen(false);\n  }\n\n  const setOldGame = (oldGame: GameModel) => {\n    if (canSaveGame(game)) {\n      addGame(game);\n    }\n    deleteGame(oldGame.id);\n    setGame({...oldGame, timestamp: new Date()});\n    setHistoryOpen(false);\n  }\n\n  const deleteOldGame = (id: string) => {\n    deleteGame(id);\n    setHistoryOpen(false);\n  }\n\n  const handlePointsChange = (points: Points[], id: string) => {\n    setGame({\n      ...game,\n      players: game.players.map(player => player.id === id ? {...player, points} : player)\n    });\n  }\n\n  const addPlayer = () => {\n    setGame({\n      ...game,\n      players: game.players.concat({id: uuidv4(), name: `Player ${game.players.length + 1}`, points: [null]})\n    });\n    enqueueSnackbar(`${game.players.length + 1} players`);\n  }\n\n  const clearPoints = () => {\n    setGame({\n      ...game,\n      players: game.players.map(player => ({...player, points: [null]}))\n    });\n  }\n\n  const setPlayerName = (name: string, id: string) => {\n    setGame({\n      ...game,\n      players: game.players.map(player => player.id === id ? {...player, name} : player)\n    });\n  }\n\n  const deletePlayer = (id: string) => {\n    setGame({\n      ...game,\n      players: game.players.filter(player => player.id !== id)\n    });\n  }\n\n  return (\n    <div className=\"app\">\n      <TopBar gameName={game.name}\n              onNameChange={setGameName}\n              onAddPlayer={addPlayer}\n              onClearPoints={clearPoints}\n              onOpenDelete={() => setDeleteOpen(true)}\n              onOpenLeaderBoard={() => setLeaderboardOpen(true)}\n              onNewGame={() => setNewGameOpen(true)}\n              onOpenHistory={() => setHistoryOpen(true)}\n      />\n      <PointsTable onPlayerNameChange={setPlayerName}\n                   onPointsChange={handlePointsChange}\n                   players={game.players}\n                   readonly={false}\n      />\n      <DeletePlayersDialog players={game.players}\n                           open={deleteOpen}\n                           onDelete={deletePlayer}\n                           onClose={() => setDeleteOpen(false)}\n      />\n      <LeaderboardDialog players={game.players}\n                         open={leaderboardOpen}\n                         onClose={() => setLeaderboardOpen(false)}\n      />\n      <NewGameDialog open={newGameOpen}\n                     game={game}\n                     onClose={() => setNewGameOpen(false)}\n                     onSubmit={setNewGame}\n      />\n      <HistoryDialog open={historyOpen}\n                     onClose={() => setHistoryOpen(false)}\n                     onReturnPlaying={setOldGame}\n                     onDeleteGame={deleteOldGame}\n                     games={games}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createTheme} from \"@material-ui/core\";\r\n\r\nexport const theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#3F51B5',\r\n      contrastText: '#ffffff',\r\n    },\r\n    secondary: {\r\n      main: '#FFA000',\r\n      contrastText: '#ffffff'\r\n    },\r\n  },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport {MuiThemeProvider} from '@material-ui/core';\nimport {theme} from \"./theme\";\nimport {SnackbarProvider} from \"notistack\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiThemeProvider theme={theme}>\n      <SnackbarProvider maxSnack={1}\n                        dense={true}\n                        anchorOrigin={{\n                          vertical: 'bottom',\n                          horizontal: 'center',\n                        }}\n      >\n        <App/>\n      </SnackbarProvider>\n    </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}